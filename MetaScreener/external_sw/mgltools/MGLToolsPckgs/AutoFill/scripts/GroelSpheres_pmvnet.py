#!/bin/ksh ~/.mgltools/pythonsh
########################################################################
#
#    Vision Network - Python source code - file generated by vision
#    Thursday 18 March 2010 09:57:19 
#    
#       The Scripps Research Institute (TSRI)
#       Molecular Graphics Lab
#       La Jolla, CA 92037, USA
#
# Copyright: Daniel Stoffler, Michel Sanner and TSRI
#   
# revision: Guillaume Vareille
#  
#########################################################################
#
# $Header: /opt/cvs/AutoFill/scripts/GroelSpheres_pmvnet.py,v 1.1.1.1 2010/03/22 17:14:47 sanner Exp $
#
# $Id: GroelSpheres_pmvnet.py,v 1.1.1.1 2010/03/22 17:14:47 sanner Exp $
#


if __name__=='__main__':
    from sys import argv
    if '--help' in argv or '-h' in argv or '-w' in argv: # run without Vision
        withoutVision = True
        from Vision.VPE import NoGuiExec
        ed = NoGuiExec()
        from NetworkEditor.net import Network
        import os
        masterNet = Network("process-"+str(os.getpid()))
        ed.addNetwork(masterNet)
    else: # run as a stand alone application while vision is hidden
        withoutVision = False
        from Vision import launchVisionToRunNetworkAsApplication, mainLoopVisionToRunNetworkAsApplication
	if '-noSplash' in argv:
	    splash = False
	else:
	    splash = True
        masterNet = launchVisionToRunNetworkAsApplication(splash=splash)
        import os
        masterNet.filename = os.path.abspath(__file__)
from traceback import print_exc
## loading libraries ##
from Pmv.VisionInterface.PmvNodes import pmvlib
from MolKit.VisionInterface.MolKitNodes import molkitlib
from DejaVu.VisionInterface.DejaVuNodes import vizlib
from Vision.StandardNodes import stdlib
try:
    masterNet
except (NameError, AttributeError): # we run the network outside Vision
    from NetworkEditor.net import Network
    masterNet = Network()

masterNet.getEditor().addLibraryInstance(pmvlib,"Pmv.VisionInterface.PmvNodes", "pmvlib")

masterNet.getEditor().addLibraryInstance(molkitlib,"MolKit.VisionInterface.MolKitNodes", "molkitlib")

masterNet.getEditor().addLibraryInstance(vizlib,"DejaVu.VisionInterface.DejaVuNodes", "vizlib")

masterNet.getEditor().addLibraryInstance(stdlib,"Vision.StandardNodes", "stdlib")

try:
    ## saving node 1AON ##
    import os
    from mglutil.util.relpath import rel2abs
    lRelFileName = '1AON.pdb'
    lNetworkDir = os.path.dirname(os.path.abspath(masterNet.filename))
    lAbsFileName = rel2abs(lRelFileName, lNetworkDir)
    mol = masterNet.editor.vf.loadMoleculeIfNeeded(lAbsFileName)
    assert mol
    from Pmv.VisionInterface.PmvNodes import PmvMolecule
    _1AON_0 = PmvMolecule(molecule=masterNet.editor.vf.expandNodes("1AON")[0], constrkw={'molecule': 'masterNet.editor.vf.expandNodes("1AON")[0]'}, name='1AON', library=pmvlib)
    masterNet.addNode(_1AON_0,324,9)
    apply(_1AON_0.configure, (), {'paramPanelImmediate': 1, 'expanded': False})
except:
    print "WARNING: failed to restore PmvMolecule named 1AON in network masterNet"
    print_exc()
    _1AON_0=None

try:
    ## saving node Select MolFrag ##
    from MolKit.VisionInterface.MolKitNodes import NodeSelector
    Select_MolFrag_1 = NodeSelector(constrkw={}, name='Select MolFrag', library=molkitlib)
    masterNet.addNode(Select_MolFrag_1,59,59)
    apply(Select_MolFrag_1.outputPortByName['nodes'].configure, (), {'datatype': 'ChainSet'})
    Select_MolFrag_1.inputPortByName['nodeType'].widget.set(r"Chain", run=False)
    Select_MolFrag_1.inputPortByName['selectionString'].widget.set(r"H,I,J,K,L,M,N", run=False)
    apply(Select_MolFrag_1.configure, (), {'paramPanelImmediate': 1})
except:
    print "WARNING: failed to restore NodeSelector named Select MolFrag in network masterNet"
    print_exc()
    Select_MolFrag_1=None

try:
    ## saving node iterate ##
    from Vision.StandardNodes import Iterate
    iterate_2 = Iterate(constrkw={}, name='iterate', library=stdlib)
    masterNet.addNode(iterate_2,64,187)
    apply(iterate_2.configure, (), {'paramPanelImmediate': 1, 'expanded': False})
except:
    print "WARNING: failed to restore Iterate named iterate in network masterNet"
    print_exc()
    iterate_2=None

try:
    ## saving node Select MolFrag ##
    from MolKit.VisionInterface.MolKitNodes import NodeSelector
    Select_MolFrag_3 = NodeSelector(constrkw={}, name='Select MolFrag', library=molkitlib)
    masterNet.addNode(Select_MolFrag_3,72,247)
    Select_MolFrag_3.inputPortByName['nodeType'].widget.set(r"Atom", run=False)
    Select_MolFrag_3.inputPortByName['selectionString'].widget.set(r"", run=False)
except:
    print "WARNING: failed to restore NodeSelector named Select MolFrag in network masterNet"
    print_exc()
    Select_MolFrag_3=None

try:
    ## saving node Extract Atom Property ##
    from MolKit.VisionInterface.MolKitNodes import AtomsProperty
    Extract_Atom_Property_4 = AtomsProperty(constrkw={}, name='Extract Atom Property', library=molkitlib)
    masterNet.addNode(Extract_Atom_Property_4,79,346)
    Extract_Atom_Property_4.inputPortByName['propertyName'].widget.set(r"coords", run=False)
    apply(Extract_Atom_Property_4.configure, (), {'paramPanelImmediate': 1})
except:
    print "WARNING: failed to restore AtomsProperty named Extract Atom Property in network masterNet"
    print_exc()
    Extract_Atom_Property_4=None

try:
    ## saving node Pmv Viewer ##
    from Pmv.VisionInterface.PmvNodes import PmvViewer
    Pmv_Viewer_5 = PmvViewer(viewer=masterNet.editor.vf.GUI.VIEWER, constrkw={'viewer': 'masterNet.editor.vf.GUI.VIEWER'}, name='Pmv Viewer', library=pmvlib)
    masterNet.addNode(Pmv_Viewer_5,477,665)
    apply(Pmv_Viewer_5.configure, (), {'paramPanelImmediate': 1, 'expanded': False})
    ##
        ## Saving State for Viewer
    Pmv_Viewer_5.vi.TransformRootOnly(1)
    ##

    ## Light Model
    ## End Light Model

    ## Light sources
    ## End Light sources 7

    ## Cameras
    ## Camera Number 0
    state = {'color': (0.0, 0.0, 0.0, 1.0), 'd2off': 1, 'height': 776, 'lookAt': [0.0, 0.0, 0.0], 'rootx': 1801, 'pivot': [0.0, 0.0, 0.0], 'translation': [0.0, 0.0, 0.0], 'sideBySideTranslation': 0.0, 'fov': 41.470354283395572, 'scale': [1.0, 1.0, 1.0], 'stereoMode': 'MONO', 'width': 997, 'sideBySideRotAngle': 3.0, 'boundingbox': 0, 'projectionType': 0, 'contours': False, 'd2cutL': 150, 'direction': [0.0, 0.0, -371.88535], 'd2cutH': 255, 'far': 518.20434380315885, 'd1off': 4, 'lookFrom': [0.0, 0.0, 371.88535], 'd1cutH': 60, 'antialiased': 4, 'rotation': [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0], 'd1ramp': [0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 4.0, 4.0, 4.0, 4.0, 7.0, 9.0, 12.0, 14.0, 17.0, 19.0, 22.0, 24.0, 27.0, 29.0, 32.0, 34.0, 37.0, 44.0, 51.0, 57.0, 64.0, 71.0, 78.0, 84.0, 91.0, 98.0, 105.0, 111.0, 118.0, 125.0, 126.0, 128.0, 129.0, 130.0, 132.0, 133.0, 135.0, 136.0, 137.0, 139.0, 140.0, 141.0, 143.0, 144.0, 145.0, 147.0, 148.0, 149.0, 151.0, 152.0, 154.0, 155.0, 156.0, 158.0, 159.0, 160.0, 162.0, 163.0, 164.0, 166.0, 167.0, 168.0, 170.0, 171.0, 173.0, 174.0, 175.0, 177.0, 178.0, 179.0, 181.0, 182.0, 183.0, 185.0, 186.0, 187.0, 189.0, 190.0, 192.0, 193.0, 194.0, 196.0, 197.0, 197.0, 198.0, 198.0, 199.0, 199.0, 199.0, 200.0, 200.0, 200.0, 201.0, 201.0, 202.0, 202.0, 202.0, 203.0, 203.0, 204.0, 204.0, 204.0, 205.0, 205.0, 205.0, 206.0, 206.0, 207.0, 207.0, 207.0, 208.0, 208.0, 209.0, 209.0, 209.0, 210.0, 210.0, 210.0, 211.0, 211.0, 212.0, 212.0, 212.0, 213.0, 213.0, 214.0, 214.0, 214.0, 215.0, 215.0, 215.0, 216.0, 216.0, 217.0, 217.0, 217.0, 218.0, 218.0, 219.0, 219.0, 219.0, 220.0, 220.0, 220.0, 221.0, 221.0, 222.0, 222.0, 222.0, 223.0, 223.0, 224.0, 224.0, 224.0, 225.0, 225.0, 225.0, 226.0, 226.0, 227.0, 227.0, 227.0, 228.0, 228.0, 228.0, 229.0, 229.0, 230.0, 230.0, 230.0, 231.0, 231.0, 232.0, 232.0, 232.0, 233.0, 233.0, 233.0, 234.0, 234.0, 235.0, 235.0, 235.0, 236.0, 236.0, 237.0, 237.0, 237.0, 238.0, 238.0, 238.0, 239.0, 239.0, 240.0, 240.0, 240.0, 241.0, 241.0, 242.0, 242.0, 242.0, 243.0, 243.0, 243.0, 244.0, 244.0, 245.0, 245.0, 245.0, 246.0, 246.0, 247.0, 247.0, 247.0, 248.0, 248.0, 248.0, 249.0, 249.0, 250.0, 250.0, 250.0, 251.0, 251.0, 252.0, 252.0, 252.0, 253.0, 253.0, 253.0, 254.0, 254.0, 255.0, 255.0], 'suspendRedraw': False, 'd1cutL': 0, 'd2scale': 0.0, 'near': 245.4082733561489, 'drawThumbnail': False, 'rooty': 302, 'd1scale': 0.012999999999999999}
    apply(Pmv_Viewer_5.vi.cameras[0].Set, (), state)

    state = {'end': 471.0948580028716, 'density': 0.10000000000000001, 'color': (0.0, 0.0, 0.0, 1.0), 'enabled': 1, 'start': 272.67585928460988, 'mode': 'GL_LINEAR'}
    apply(Pmv_Viewer_5.vi.cameras[0].fog.Set, (), state)

    ## End Cameras

    ## Clipping planes
    ## End Clipping planes

    ## Root object
    state = {'scissorAspectRatio': 1.0, 'inheritStippleLines': 0, 'stippleLines': False, 'disableStencil': False, 'replace': True, 'visible': True, 'immediateRendering': False, 'inheritLighting': False, 'invertNormals': False, 'pivot': [0.0, 0.0, 0.0], 'rotation': [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0], 'instanceMatricesFromFortran': [[1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0]], 'scissorH': 200, 'frontPolyMode': 'fill', 'blendFunctions': ('GL_SRC_ALPHA', 'GL_ONE_MINUS_SRC_ALPHA'), 'outline': (False, False), 'vertexArrayFlag': False, 'scissorX': 0, 'scissorY': 0, 'listed': True, 'inheritPointWidth': 0, 'pickable': True, 'pointWidth': 2, 'scissorW': 200, 'needsRedoDpyListOnResize': False, 'stipplePolygons': False, 'pickableVertices': False, 'inheritMaterial': False, 'depthMask': 1, 'inheritSharpColorBoundaries': False, 'scale': [1.0, 1.0, 1.0], 'lighting': True, 'inheritCulling': False, 'inheritShading': False, 'shading': 'smooth', 'translation': [0.0, 0.0, 0.0], 'transparent': False, 'sharpColorBoundaries': True, 'culling': 'back', 'name': 'root', 'backPolyMode': 'fill', 'inheritFrontPolyMode': False, 'inheritStipplePolygons': 0, 'inheritBackPolyMode': False, 'scissor': False, 'inheritLineWidth': 0, 'lineWidth': 2, 'inheritXform': 0}
    apply(Pmv_Viewer_5.vi.rootObject.Set, (), state)

    ## End Root Object

    ## Material for root
    if Pmv_Viewer_5.vi.rootObject:
        pass  ## needed in case there no modif
    ## End Materials for root

    ## Clipping Planes for root
    if Pmv_Viewer_5.vi.rootObject:
        Pmv_Viewer_5.vi.rootObject.clipP = []
        Pmv_Viewer_5.vi.rootObject.clipPI = []
        pass  ## needed in case there no modif
    ## End Clipping Planes for root

except:
    print "WARNING: failed to restore PmvViewer named Pmv Viewer in network masterNet"
    print_exc()
    Pmv_Viewer_5=None

try:
    ## saving node Gyration Sphere ##
    from DejaVu.VisionInterface.DejaVuNodes import GyrationSphere
    Gyration_Sphere_6 = GyrationSphere(constrkw={}, name='Gyration Sphere', library=vizlib)
    masterNet.addNode(Gyration_Sphere_6,91,448)
except:
    print "WARNING: failed to restore GyrationSphere named Gyration Sphere in network masterNet"
    print_exc()
    Gyration_Sphere_6=None

try:
    ## saving node accum ##
    from Vision.StandardNodes import Accumulate
    accum_7 = Accumulate(constrkw={}, name='accum', library=stdlib)
    masterNet.addNode(accum_7,105,512)
except:
    print "WARNING: failed to restore Accumulate named accum in network masterNet"
    print_exc()
    accum_7=None

try:
    ## saving node accum ##
    from Vision.StandardNodes import Accumulate
    accum_8 = Accumulate(constrkw={}, name='accum', library=stdlib)
    masterNet.addNode(accum_8,196,513)
except:
    print "WARNING: failed to restore Accumulate named accum in network masterNet"
    print_exc()
    accum_8=None

try:
    ## saving node Spheres ##
    from DejaVu.VisionInterface.GeometryNodes import Spheres
    Spheres_9 = Spheres(constrkw={}, name='Spheres', library=vizlib)
    masterNet.addNode(Spheres_9,176,633)
    Spheres_9.inputPortByName['radius'].rebindWidget()
    Spheres_9.inputPortByName['radius'].widget.set(1.0, run=False)
    Spheres_9.inputPortByName['radius'].unbindWidget()
    Spheres_9.inputPortByName['quality'].widget.set(5, run=False)
    Spheres_9.inputPortByName['name'].widget.set(r"", run=False)
    Spheres_9.inputPortByName['geoms'].widget.set(r"Spheres", run=False)
    apply(Spheres_9.configure, (), {'paramPanelImmediate': 1})
except:
    print "WARNING: failed to restore Spheres named Spheres in network masterNet"
    print_exc()
    Spheres_9=None

try:
    ## saving node Array Ufunc2 ##
    from Vision.StandardNodes import BinaryFuncs
    Array_Ufunc2_10 = BinaryFuncs(constrkw={}, name='Array Ufunc2', library=stdlib)
    masterNet.addNode(Array_Ufunc2_10,212,559)
    Array_Ufunc2_10.inputPortByName['operator'].widget.set(r"multiply", run=False)
except:
    print "WARNING: failed to restore BinaryFuncs named Array Ufunc2 in network masterNet"
    print_exc()
    Array_Ufunc2_10=None

try:
    ## saving node ThumbWheel ##
    from Vision.StandardNodes import ThumbWheelNE
    ThumbWheel_11 = ThumbWheelNE(constrkw={}, name='ThumbWheel', library=stdlib)
    masterNet.addNode(ThumbWheel_11,318,394)
    ThumbWheel_11.inputPortByName['thumbwheel'].widget.set(1.33333333333, run=False)
    apply(ThumbWheel_11.configure, (), {'paramPanelImmediate': 1})
except:
    print "WARNING: failed to restore ThumbWheelNE named ThumbWheel in network masterNet"
    print_exc()
    ThumbWheel_11=None

try:
    ## saving node Select MolFrag ##
    from MolKit.VisionInterface.MolKitNodes import NodeSelector
    Select_MolFrag_12 = NodeSelector(constrkw={}, name='Select MolFrag', library=molkitlib)
    masterNet.addNode(Select_MolFrag_12,356,67)
    apply(Select_MolFrag_12.outputPortByName['nodes'].configure, (), {'datatype': 'ChainSet'})
    Select_MolFrag_12.inputPortByName['nodeType'].widget.set(r"Chain", run=False)
    Select_MolFrag_12.inputPortByName['selectionString'].widget.set(r"A,B,C,D,E,F,G,O,P,Q,R,S,T,U", run=False)
except:
    print "WARNING: failed to restore NodeSelector named Select MolFrag in network masterNet"
    print_exc()
    Select_MolFrag_12=None

try:
    ## saving node Select MolFrag ##
    from MolKit.VisionInterface.MolKitNodes import NodeSelector
    Select_MolFrag_13 = NodeSelector(constrkw={}, name='Select MolFrag', library=molkitlib)
    masterNet.addNode(Select_MolFrag_13,386,196)
    apply(Select_MolFrag_13.inputPortByName['nodes'].configure, (), {'defaultValue': None})
    apply(Select_MolFrag_13.inputPortByName['nodeType'].configure, (), {'defaultValue': None})
    apply(Select_MolFrag_13.inputPortByName['selectionString'].configure, (), {'defaultValue': None})
    Select_MolFrag_13.inputPortByName['nodeType'].widget.set(r"Atom", run=False)
    Select_MolFrag_13.inputPortByName['selectionString'].widget.set(r"", run=False)
    apply(Select_MolFrag_13.configure, (), {'paramPanelImmediate': 1})
except:
    print "WARNING: failed to restore NodeSelector named Select MolFrag in network masterNet"
    print_exc()
    Select_MolFrag_13=None

try:
    ## saving node Extract Atom Property ##
    from MolKit.VisionInterface.MolKitNodes import AtomsProperty
    Extract_Atom_Property_14 = AtomsProperty(constrkw={}, name='Extract Atom Property', library=molkitlib)
    masterNet.addNode(Extract_Atom_Property_14,393,295)
    apply(Extract_Atom_Property_14.inputPortByName['atoms'].configure, (), {'defaultValue': None})
    apply(Extract_Atom_Property_14.inputPortByName['propertyName'].configure, (), {'defaultValue': None})
    Extract_Atom_Property_14.inputPortByName['propertyName'].widget.set(r"coords", run=False)
    apply(Extract_Atom_Property_14.configure, (), {'paramPanelImmediate': 1})
except:
    print "WARNING: failed to restore AtomsProperty named Extract Atom Property in network masterNet"
    print_exc()
    Extract_Atom_Property_14=None

try:
    ## saving node Gyration Sphere ##
    from DejaVu.VisionInterface.DejaVuNodes import GyrationSphere
    Gyration_Sphere_15 = GyrationSphere(constrkw={}, name='Gyration Sphere', library=vizlib)
    masterNet.addNode(Gyration_Sphere_15,540,388)
    apply(Gyration_Sphere_15.inputPortByName['coords'].configure, (), {'defaultValue': None})
    apply(Gyration_Sphere_15.configure, (), {'paramPanelImmediate': 1, 'expanded': False})
except:
    print "WARNING: failed to restore GyrationSphere named Gyration Sphere in network masterNet"
    print_exc()
    Gyration_Sphere_15=None

try:
    ## saving node Spheres1 ##
    from DejaVu.VisionInterface.GeometryNodes import Spheres
    Spheres1_16 = Spheres(constrkw={}, name='Spheres1', library=vizlib)
    masterNet.addNode(Spheres1_16,537,462)
    Spheres1_16.inputPortByName['radius'].rebindWidget()
    Spheres1_16.inputPortByName['radius'].widget.set(1.0, run=False)
    Spheres1_16.inputPortByName['radius'].unbindWidget()
    Spheres1_16.inputPortByName['quality'].widget.set(5, run=False)
    Spheres1_16.inputPortByName['name'].widget.set(r"", run=False)
    Spheres1_16.inputPortByName['geoms'].widget.set(r"Spheres1", run=False)
    apply(Spheres1_16.configure, (), {'paramPanelImmediate': 1})
except:
    print "WARNING: failed to restore Spheres named Spheres1 in network masterNet"
    print_exc()
    Spheres1_16=None

try:
    ## saving node Array Ufunc2 ##
    from Vision.StandardNodes import BinaryFuncs
    Array_Ufunc2_17 = BinaryFuncs(constrkw={}, name='Array Ufunc2', library=stdlib)
    masterNet.addNode(Array_Ufunc2_17,421,481)
    Array_Ufunc2_17.inputPortByName['operator'].widget.set(r"multiply", run=False)
except:
    print "WARNING: failed to restore BinaryFuncs named Array Ufunc2 in network masterNet"
    print_exc()
    Array_Ufunc2_17=None

try:
    ## saving node iterate ##
    from Vision.StandardNodes import Iterate
    iterate_18 = Iterate(constrkw={}, name='iterate', library=stdlib)
    masterNet.addNode(iterate_18,29,704)
    apply(iterate_18.configure, (), {'paramPanelImmediate': 1, 'expanded': False})
except:
    print "WARNING: failed to restore Iterate named iterate in network masterNet"
    print_exc()
    iterate_18=None

try:
    ## saving node eval ##
    from Vision.StandardNodes import Eval
    eval_19 = Eval(constrkw={}, name='eval', library=stdlib)
    masterNet.addNode(eval_19,29,804)
    eval_19.inputPortByName['command'].widget.set(r"'[%.2f,%.2f,%.2f]'%tuple(in1)", run=False)
    eval_19.inputPortByName['importString'].widget.set(r"", run=False)
    apply(eval_19.configure, (), {'paramPanelImmediate': 1})
except:
    print "WARNING: failed to restore Eval named eval in network masterNet"
    print_exc()
    eval_19=None

try:
    ## saving node print ##
    from Vision.StandardNodes import Print
    print_20 = Print(constrkw={}, name='print', library=stdlib)
    masterNet.addNode(print_20,41,920)
except:
    print "WARNING: failed to restore Print named print in network masterNet"
    print_exc()
    print_20=None

#masterNet.run()
masterNet.freeze()

## saving connections for network GroelSpheres ##
if _1AON_0 is not None and Select_MolFrag_1 is not None:
    try:
        masterNet.connectNodes(
            _1AON_0, Select_MolFrag_1, "Molecule", "nodes", blocking=True
            , splitratio=[0.52152532821868314, 0.68516076051492369])
    except:
        print "WARNING: failed to restore connection between _1AON_0 and Select_MolFrag_1 in network masterNet"
if Select_MolFrag_1 is not None and iterate_2 is not None:
    try:
        masterNet.connectNodes(
            Select_MolFrag_1, iterate_2, "nodes", "listToLoopOver", blocking=True
            , splitratio=[0.55743935521180998, 0.53867585725580502])
    except:
        print "WARNING: failed to restore connection between Select_MolFrag_1 and iterate_2 in network masterNet"
if iterate_2 is not None and Select_MolFrag_3 is not None:
    try:
        masterNet.connectNodes(
            iterate_2, Select_MolFrag_3, "oneItem", "nodes", blocking=True
            , splitratio=[0.58012590061995462, 0.56938805158538042])
    except:
        print "WARNING: failed to restore connection between iterate_2 and Select_MolFrag_3 in network masterNet"
if Select_MolFrag_3 is not None and Extract_Atom_Property_4 is not None:
    try:
        masterNet.connectNodes(
            Select_MolFrag_3, Extract_Atom_Property_4, "nodes", "atoms", blocking=True
            , splitratio=[0.59929417236966609, 0.46924503737868073])
    except:
        print "WARNING: failed to restore connection between Select_MolFrag_3 and Extract_Atom_Property_4 in network masterNet"
if Extract_Atom_Property_4 is not None and Gyration_Sphere_6 is not None:
    try:
        masterNet.connectNodes(
            Extract_Atom_Property_4, Gyration_Sphere_6, "propertyValues", "coords", blocking=True
            , splitratio=[0.7488366064142018, 0.31220859649743876])
    except:
        print "WARNING: failed to restore connection between Extract_Atom_Property_4 and Gyration_Sphere_6 in network masterNet"
if iterate_2 is not None and accum_7 is not None:
    try:
        masterNet.connectNodes(
            iterate_2, accum_7, "begin", "begin", blocking=True
            , splitratio=[0.32874082585092856, 0.69128992506611919])
    except:
        print "WARNING: failed to restore connection between iterate_2 and accum_7 in network masterNet"
if iterate_2 is not None and accum_7 is not None:
    try:
        masterNet.connectNodes(
            iterate_2, accum_7, "end", "output", blocking=True
            , splitratio=[0.35887726765173411, 0.38951708607420665])
    except:
        print "WARNING: failed to restore connection between iterate_2 and accum_7 in network masterNet"
if iterate_2 is not None and accum_8 is not None:
    try:
        masterNet.connectNodes(
            iterate_2, accum_8, "begin", "begin", blocking=True
            , splitratio=[0.59558030042024668, 0.64247746141843565])
    except:
        print "WARNING: failed to restore connection between iterate_2 and accum_8 in network masterNet"
if iterate_2 is not None and accum_8 is not None:
    try:
        masterNet.connectNodes(
            iterate_2, accum_8, "end", "output", blocking=True
            , splitratio=[0.54817667936462744, 0.73209784719089144])
    except:
        print "WARNING: failed to restore connection between iterate_2 and accum_8 in network masterNet"
if Gyration_Sphere_6 is not None and accum_7 is not None:
    try:
        masterNet.connectNodes(
            Gyration_Sphere_6, accum_7, "center", "data", blocking=True
            , splitratio=[0.39930248954263969, 0.57285137524828678])
    except:
        print "WARNING: failed to restore connection between Gyration_Sphere_6 and accum_7 in network masterNet"
if Gyration_Sphere_6 is not None and accum_8 is not None:
    try:
        masterNet.connectNodes(
            Gyration_Sphere_6, accum_8, "radius", "data", blocking=True
            , splitratio=[0.34607416481717934, 0.50220308250064427])
    except:
        print "WARNING: failed to restore connection between Gyration_Sphere_6 and accum_8 in network masterNet"
if accum_7 is not None and Spheres_9 is not None:
    try:
        masterNet.connectNodes(
            accum_7, Spheres_9, "listOfValues", "coords", blocking=True
            , splitratio=[0.42960797582778337, 0.4641370581405368])
    except:
        print "WARNING: failed to restore connection between accum_7 and Spheres_9 in network masterNet"
if Spheres_9 is not None and Pmv_Viewer_5 is not None:
    try:
        masterNet.connectNodes(
            Spheres_9, Pmv_Viewer_5, "spheres", "geometries", blocking=True
            , splitratio=[0.66509019554381466, 0.71348888016332546])
    except:
        print "WARNING: failed to restore connection between Spheres_9 and Pmv_Viewer_5 in network masterNet"
if accum_8 is not None and Array_Ufunc2_10 is not None:
    try:
        masterNet.connectNodes(
            accum_8, Array_Ufunc2_10, "listOfValues", "inArrayList1", blocking=True
            , splitratio=[0.43957953517490089, 0.69790892595465737])
    except:
        print "WARNING: failed to restore connection between accum_8 and Array_Ufunc2_10 in network masterNet"
if ThumbWheel_11 is not None and Array_Ufunc2_10 is not None:
    try:
        masterNet.connectNodes(
            ThumbWheel_11, Array_Ufunc2_10, "value", "inArrayList2", blocking=True
            , splitratio=[0.61002174032312428, 0.61771282682287421])
    except:
        print "WARNING: failed to restore connection between ThumbWheel_11 and Array_Ufunc2_10 in network masterNet"
if Array_Ufunc2_10 is not None and Spheres_9 is not None:
    try:
        masterNet.connectNodes(
            Array_Ufunc2_10, Spheres_9, "outArrayList", "radius", blocking=True
            , splitratio=[0.54345387993857386, 0.31843870911832689])
    except:
        print "WARNING: failed to restore connection between Array_Ufunc2_10 and Spheres_9 in network masterNet"
if _1AON_0 is not None and Select_MolFrag_12 is not None:
    try:
        masterNet.connectNodes(
            _1AON_0, Select_MolFrag_12, "Molecule", "nodes", blocking=True
            , splitratio=[0.4571668301500732, 0.23964069922676534])
    except:
        print "WARNING: failed to restore connection between _1AON_0 and Select_MolFrag_12 in network masterNet"
if Select_MolFrag_13 is not None and Extract_Atom_Property_14 is not None:
    try:
        masterNet.connectNodes(
            Select_MolFrag_13, Extract_Atom_Property_14, "nodes", "atoms", blocking=True
            , splitratio=[0.59929417236966609, 0.46924503737868073])
    except:
        print "WARNING: failed to restore connection between Select_MolFrag_13 and Extract_Atom_Property_14 in network masterNet"
if Extract_Atom_Property_14 is not None and Gyration_Sphere_15 is not None:
    try:
        masterNet.connectNodes(
            Extract_Atom_Property_14, Gyration_Sphere_15, "propertyValues", "coords", blocking=True
            , splitratio=[0.7488366064142018, 0.31220859649743876])
    except:
        print "WARNING: failed to restore connection between Extract_Atom_Property_14 and Gyration_Sphere_15 in network masterNet"
if Select_MolFrag_12 is not None and Select_MolFrag_13 is not None:
    try:
        masterNet.connectNodes(
            Select_MolFrag_12, Select_MolFrag_13, "nodes", "nodes", blocking=True
            , splitratio=[0.68318889220819601, 0.52224666747143733])
    except:
        print "WARNING: failed to restore connection between Select_MolFrag_12 and Select_MolFrag_13 in network masterNet"
if Gyration_Sphere_15 is not None and Spheres1_16 is not None:
    try:
        masterNet.connectNodes(
            Gyration_Sphere_15, Spheres1_16, "center", "coords", blocking=True
            , splitratio=[0.21817749415958337, 0.57695723048800396])
    except:
        print "WARNING: failed to restore connection between Gyration_Sphere_15 and Spheres1_16 in network masterNet"
if Spheres1_16 is not None and Pmv_Viewer_5 is not None:
    try:
        masterNet.connectNodes(
            Spheres1_16, Pmv_Viewer_5, "spheres", "geometries", blocking=True
            , splitratio=[0.53889692822948576, 0.43811840163851973])
    except:
        print "WARNING: failed to restore connection between Spheres1_16 and Pmv_Viewer_5 in network masterNet"
if Gyration_Sphere_15 is not None and Array_Ufunc2_17 is not None:
    try:
        masterNet.connectNodes(
            Gyration_Sphere_15, Array_Ufunc2_17, "radius", "inArrayList1", blocking=True
            , splitratio=[0.33553357210893098, 0.73861051086673002])
    except:
        print "WARNING: failed to restore connection between Gyration_Sphere_15 and Array_Ufunc2_17 in network masterNet"
if ThumbWheel_11 is not None and Array_Ufunc2_17 is not None:
    try:
        masterNet.connectNodes(
            ThumbWheel_11, Array_Ufunc2_17, "value", "inArrayList2", blocking=True
            , splitratio=[0.71345112444370962, 0.21204144868458366])
    except:
        print "WARNING: failed to restore connection between ThumbWheel_11 and Array_Ufunc2_17 in network masterNet"
if Array_Ufunc2_17 is not None and Spheres1_16 is not None:
    try:
        masterNet.connectNodes(
            Array_Ufunc2_17, Spheres1_16, "outArrayList", "radius", blocking=True
            , splitratio=[0.33215513613571207, 0.55126644256136292])
    except:
        print "WARNING: failed to restore connection between Array_Ufunc2_17 and Spheres1_16 in network masterNet"
if eval_19 is not None and print_20 is not None:
    try:
        masterNet.connectNodes(
            eval_19, print_20, "result", "in1", blocking=True
            , splitratio=[0.21410623648347019, 0.23601144117202147])
    except:
        print "WARNING: failed to restore connection between eval_19 and print_20 in network masterNet"
masterNet.runOnNewData.value = True


def loadSavedStates_Pmv_Viewer_5(self=Pmv_Viewer_5, event=None):
    ##
    ## Saving State for objects in Viewer
    ##

    ## Object root|misc
    ## Object root|CoarseAPBSbox
    ## Object root|FineAPBSbox
    ## Object root|1AON
    ## Object root|misc|addBondsGeom
    ## Object root|misc|edit_geoms
    ## Object root|misc|repair_geoms
    ## Object root|misc|measure_geoms
    ## Object root|misc|setTorsionGeom
    ## Object root|misc|selectInSphereGeoms
    ## Object root|1AON|selection
    ## Object root|1AON|lines
    ## Object root|1AON|AtomLabels
    state = {'inheritStippleLines': True, 'stippleLines': False, 'labels': ['Aa'], 'disableStencil': False, 'replace': True, 'scissorAspectRatio': 1.0, 'immediateRendering': True, 'inheritLighting': True, 'pivot': [0.0, 0.0, 0.0], 'billboard': True, 'invertNormals': False, 'font': 'arial1.glf', 'translation': [0.0, 0.0, 0.0], 'instanceMatricesFromFortran': [[1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0]], 'scissorH': 200, 'frontPolyMode': 'fill', 'blendFunctions': ('GL_SRC_ALPHA', 'GL_ONE_MINUS_SRC_ALPHA'), 'inheritFrontPolyMode': True, 'vertexArrayFlag': False, 'name': 'AtomLabels', 'scissorX': 0, 'scissorY': 0, 'listed': True, 'inheritPointWidth': True, 'fontSpacing': 0.20000000000000001, 'pickable': 0, 'pointWidth': 2, 'scissorW': 200, 'needsRedoDpyListOnResize': False, 'stipplePolygons': False, 'pickableVertices': False, 'inheritMaterial': False, 'depthMask': 1, 'inheritSharpColorBoundaries': True, 'includeCameraRotationInBillboard': False, 'fontScales': (0.29999999999999999, 0.29999999999999999, 0.10000000000000001), 'scale': [1.0, 1.0, 1.0], 'lighting': True, 'inheritCulling': False, 'inheritShading': True, 'shading': 'smooth', 'rotation': [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0], 'transparent': False, 'sharpColorBoundaries': True, 'fontRotateAngles': (0, 0, 0), 'culling': 'none', 'outline': (False, False), 'backPolyMode': 'line', 'visible': 0, 'inheritStipplePolygons': True, 'inheritBackPolyMode': False, 'scissor': False, 'protected': False, 'fontTranslation': (0, 0, 3.0), 'fontStyle': 'solid3d', 'inheritLineWidth': False, 'lineWidth': 2, 'inheritXform': 1}
    obj = self.vi.FindObjectByName('root|1AON|AtomLabels')
    if obj:
        apply(obj.Set, (), state)

    ## Material for AtomLabels
    if obj:
        pass  ## needed in case there no modif
    ## End Materials for AtomLabels

    ## Clipping Planes for AtomLabels
    if obj:
        obj.clipP = []
        obj.clipPI = []
        pass  ## needed in case there no modif
    ## End Clipping Planes for AtomLabels

    ## Object root|1AON|ResidueLabels
    state = {'inheritStippleLines': True, 'stippleLines': False, 'labels': ['Aa'], 'disableStencil': False, 'replace': True, 'scissorAspectRatio': 1.0, 'immediateRendering': True, 'inheritLighting': True, 'pivot': [0.0, 0.0, 0.0], 'billboard': True, 'invertNormals': False, 'font': 'arial1.glf', 'translation': [0.0, 0.0, 0.0], 'instanceMatricesFromFortran': [[1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0]], 'scissorH': 200, 'frontPolyMode': 'fill', 'blendFunctions': ('GL_SRC_ALPHA', 'GL_ONE_MINUS_SRC_ALPHA'), 'inheritFrontPolyMode': True, 'vertexArrayFlag': False, 'name': 'ResidueLabels', 'scissorX': 0, 'scissorY': 0, 'listed': True, 'inheritPointWidth': True, 'fontSpacing': 0.20000000000000001, 'pickable': 0, 'pointWidth': 2, 'scissorW': 200, 'needsRedoDpyListOnResize': False, 'stipplePolygons': False, 'pickableVertices': False, 'inheritMaterial': False, 'depthMask': 1, 'inheritSharpColorBoundaries': True, 'includeCameraRotationInBillboard': False, 'fontScales': (0.59999999999999998, 0.59999999999999998, 0.10000000000000001), 'scale': [1.0, 1.0, 1.0], 'lighting': True, 'inheritCulling': False, 'inheritShading': True, 'shading': 'smooth', 'rotation': [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0], 'transparent': False, 'sharpColorBoundaries': True, 'fontRotateAngles': (0, 0, 0), 'culling': 'none', 'outline': (False, False), 'backPolyMode': 'line', 'visible': 0, 'inheritStipplePolygons': True, 'inheritBackPolyMode': False, 'scissor': False, 'protected': False, 'fontTranslation': (0, 0, 3.0), 'fontStyle': 'solid3d', 'inheritLineWidth': False, 'lineWidth': 2, 'inheritXform': 1}
    obj = self.vi.FindObjectByName('root|1AON|ResidueLabels')
    if obj:
        apply(obj.Set, (), state)

    ## Material for ResidueLabels
    if obj:
        pass  ## needed in case there no modif
    ## End Materials for ResidueLabels

    ## Clipping Planes for ResidueLabels
    if obj:
        obj.clipP = []
        obj.clipPI = []
        pass  ## needed in case there no modif
    ## End Clipping Planes for ResidueLabels

    ## Object root|1AON|ChainLabels
    state = {'inheritStippleLines': True, 'stippleLines': False, 'labels': ['Aa'], 'disableStencil': False, 'replace': True, 'scissorAspectRatio': 1.0, 'immediateRendering': True, 'inheritLighting': True, 'pivot': [0.0, 0.0, 0.0], 'billboard': True, 'invertNormals': False, 'font': 'arial1.glf', 'translation': [0.0, 0.0, 0.0], 'instanceMatricesFromFortran': [[1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0]], 'scissorH': 200, 'frontPolyMode': 'fill', 'blendFunctions': ('GL_SRC_ALPHA', 'GL_ONE_MINUS_SRC_ALPHA'), 'inheritFrontPolyMode': True, 'vertexArrayFlag': False, 'name': 'ChainLabels', 'scissorX': 0, 'scissorY': 0, 'listed': True, 'inheritPointWidth': True, 'fontSpacing': 0.20000000000000001, 'pickable': 0, 'pointWidth': 2, 'scissorW': 200, 'needsRedoDpyListOnResize': False, 'stipplePolygons': False, 'pickableVertices': False, 'inheritMaterial': False, 'depthMask': 1, 'inheritSharpColorBoundaries': True, 'includeCameraRotationInBillboard': False, 'fontScales': (0.89999999999999991, 0.89999999999999991, 0.10000000000000001), 'scale': [1.0, 1.0, 1.0], 'lighting': True, 'inheritCulling': False, 'inheritShading': True, 'shading': 'smooth', 'rotation': [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0], 'transparent': False, 'sharpColorBoundaries': True, 'fontRotateAngles': (0, 0, 0), 'culling': 'none', 'outline': (False, False), 'backPolyMode': 'line', 'visible': 0, 'inheritStipplePolygons': True, 'inheritBackPolyMode': False, 'scissor': False, 'protected': False, 'fontTranslation': (0, 0, 3.0), 'fontStyle': 'solid3d', 'inheritLineWidth': False, 'lineWidth': 2, 'inheritXform': 1}
    obj = self.vi.FindObjectByName('root|1AON|ChainLabels')
    if obj:
        apply(obj.Set, (), state)

    ## Material for ChainLabels
    if obj:
        pass  ## needed in case there no modif
    ## End Materials for ChainLabels

    ## Clipping Planes for ChainLabels
    if obj:
        obj.clipP = []
        obj.clipPI = []
        pass  ## needed in case there no modif
    ## End Clipping Planes for ChainLabels

    ## Object root|1AON|ProteinLabels
    state = {'inheritStippleLines': True, 'stippleLines': False, 'labels': ['Aa'], 'disableStencil': False, 'replace': True, 'scissorAspectRatio': 1.0, 'immediateRendering': True, 'inheritLighting': True, 'pivot': [0.0, 0.0, 0.0], 'billboard': True, 'invertNormals': False, 'font': 'arial1.glf', 'translation': [0.0, 0.0, 0.0], 'instanceMatricesFromFortran': [[1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0]], 'scissorH': 200, 'frontPolyMode': 'fill', 'blendFunctions': ('GL_SRC_ALPHA', 'GL_ONE_MINUS_SRC_ALPHA'), 'inheritFrontPolyMode': True, 'vertexArrayFlag': False, 'name': 'ProteinLabels', 'scissorX': 0, 'scissorY': 0, 'listed': True, 'inheritPointWidth': True, 'fontSpacing': 0.20000000000000001, 'pickable': 0, 'pointWidth': 2, 'scissorW': 200, 'needsRedoDpyListOnResize': False, 'stipplePolygons': False, 'pickableVertices': False, 'inheritMaterial': False, 'depthMask': 1, 'inheritSharpColorBoundaries': True, 'includeCameraRotationInBillboard': False, 'fontScales': (1.2, 1.2, 0.10000000000000001), 'scale': [1.0, 1.0, 1.0], 'lighting': True, 'inheritCulling': False, 'inheritShading': True, 'shading': 'smooth', 'rotation': [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0], 'transparent': False, 'sharpColorBoundaries': True, 'fontRotateAngles': (0, 0, 0), 'culling': 'none', 'outline': (False, False), 'backPolyMode': 'line', 'visible': 0, 'inheritStipplePolygons': True, 'inheritBackPolyMode': False, 'scissor': False, 'protected': False, 'fontTranslation': (0, 0, 3.0), 'fontStyle': 'solid3d', 'inheritLineWidth': False, 'lineWidth': 2, 'inheritXform': 1}
    obj = self.vi.FindObjectByName('root|1AON|ProteinLabels')
    if obj:
        apply(obj.Set, (), state)

    ## Material for ProteinLabels
    if obj:
        pass  ## needed in case there no modif
    ## End Materials for ProteinLabels

    ## Clipping Planes for ProteinLabels
    if obj:
        obj.clipP = []
        obj.clipPI = []
        pass  ## needed in case there no modif
    ## End Clipping Planes for ProteinLabels

    ## Object root|1AON|sticks
    ## Object root|1AON|balls
    ## Object root|1AON|cpk
    ## Object root|1AON|CAsticks
    ## Object root|1AON|CAballs
    ## Object root|misc|addBondsGeom|addBondsSpheres
    ## Object root|misc|edit_geoms|editAtomTypeSphere
    ## Object root|misc|edit_geoms|editAtomChargeSphere
    ## Object root|misc|repair_geoms|closeContactGeoms
    ## Object root|misc|measure_geoms|measureDistGeomCtrl
    ## Object root|misc|measure_geoms|measureDistGeom
    ## Object root|misc|measure_geoms|measureAngleGeom
    ## Object root|misc|measure_geoms|measureTorsionGeom
    ## Object root|misc|setTorsionGeom|settorsionLine
    state = {'scissorAspectRatio': 1.0, 'inheritStippleLines': True, 'stippleLines': False, 'disableStencil': False, 'replace': True, 'visible': True, 'immediateRendering': False, 'inheritLighting': True, 'invertNormals': False, 'pivot': [0.0, 0.0, 0.0], 'rotation': [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0], 'instanceMatricesFromFortran': [[1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0]], 'scissorH': 200, 'frontPolyMode': 'fill', 'blendFunctions': ('GL_SRC_ALPHA', 'GL_ONE_MINUS_SRC_ALPHA'), 'outline': (False, False), 'vertexArrayFlag': False, 'scissorX': 0, 'scissorY': 0, 'listed': True, 'inheritPointWidth': True, 'pickable': True, 'pointWidth': 2, 'scissorW': 200, 'needsRedoDpyListOnResize': False, 'stipplePolygons': 1, 'pickableVertices': False, 'inheritMaterial': 0, 'depthMask': 1, 'inheritSharpColorBoundaries': True, 'scale': [1.0, 1.0, 1.0], 'lighting': True, 'inheritCulling': True, 'inheritShading': True, 'shading': 'smooth', 'translation': [0.0, 0.0, 0.0], 'transparent': 0, 'sharpColorBoundaries': True, 'culling': 'back', 'name': 'settorsionLine', 'backPolyMode': 'fill', 'inheritFrontPolyMode': True, 'inheritStipplePolygons': True, 'inheritBackPolyMode': False, 'scissor': False, 'protected': True, 'inheritLineWidth': True, 'lineWidth': 2, 'inheritXform': 1}
    obj = self.vi.FindObjectByName('root|misc|setTorsionGeom|settorsionLine')
    if obj:
        apply(obj.Set, (), state)

    ## Material for settorsionLine
    if obj:
        from opengltk.OpenGL import GL
        state = {'opacity': [1.0], 'binding': [10.0, 10.0, 10.0, 10.0, 10.0, 10.0], 'emission': [[0.0, 0.0, 0.0, 1.0]], 'shininess': [13.0], 'specular': [[0.89999997615814209, 0.89999997615814209, 0.89999997615814209, 1.0]], 'ambient': [[0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 1.0]], 'diffuse': [[0.0, 1.0, 1.0, 1.0]]}
        apply(obj.materials[GL.GL_FRONT].Set, (), state)

        pass  ## needed in case there no modif
    ## End Materials for settorsionLine

    ## Clipping Planes for settorsionLine
    if obj:
        obj.clipP = []
        obj.clipPI = []
        pass  ## needed in case there no modif
    ## End Clipping Planes for settorsionLine

    ## Object root|misc|setTorsionGeom|settorsionLabel
    ## Object root|misc|setTorsionGeom|settorsionSpheres
    ## Object root|misc|selectInSphereGeoms|SelSphReg_selSph
    ## Object root|misc|selectInSphereGeoms|SelSphReg_cenCross
    ## Object root|1AON|lines|bonded
    ## Object root|1AON|lines|nobnds
    ## Object root|1AON|lines|bondorder
    ## Object root|misc|repair_geoms|closeContactGeoms|closeContLines
    ## Object root|misc|repair_geoms|closeContactGeoms|closeContLabels
    ## Object root|misc|measure_geoms|measureDistGeomCtrl|distLine
    ## Object root|misc|measure_geoms|measureDistGeomCtrl|distLabel
    ## Object root|misc|measure_geoms|measureDistGeomCtrl|distSpheres
    ## Object root|misc|measure_geoms|measureDistGeom|distLine
    ## Object root|misc|measure_geoms|measureDistGeom|distLabel
    ## Object root|misc|measure_geoms|measureDistGeom|distSpheres
    ## Object root|misc|measure_geoms|measureAngleGeom|angleLine
    ## Object root|misc|measure_geoms|measureAngleGeom|angleLabel
    ## Object root|misc|measure_geoms|measureAngleGeom|angleSpheres
    ## Object root|misc|measure_geoms|measureAngleGeom|angles
    ## Object root|misc|measure_geoms|measureTorsionGeom|torsionLine
    ## Object root|misc|measure_geoms|measureTorsionGeom|torsionLabel
    ## Object root|misc|measure_geoms|measureTorsionGeom|torsionSpheres
    ## End Object root|misc|measure_geoms|measureTorsionGeom|torsionSpheres

    ##
        ## Saving State for Viewer
    self.vi.TransformRootOnly(1)
    ##

    ## Light Model
    ## End Light Model

    ## Light sources
    ## End Light sources 7

    ## Cameras
    ## Camera Number 0
    state = {'color': (0.0, 0.0, 0.0, 1.0), 'd2off': 1, 'height': 776, 'lookAt': [0.0, 0.0, 0.0], 'pivot': [0.0, 0.0, 0.0], 'translation': [0.0, 0.0, 0.0], 'sideBySideTranslation': 0.0, 'fov': 41.470354283395572, 'scale': [1.0, 1.0, 1.0], 'stereoMode': 'MONO', 'width': 997, 'sideBySideRotAngle': 3.0, 'boundingbox': 0, 'projectionType': 0, 'contours': False, 'd2cutL': 150, 'direction': [0.0, 0.0, -371.88535], 'd2cutH': 255, 'far': 518.20434380315885, 'd1off': 4, 'lookFrom': [0.0, 0.0, 371.88535], 'd1cutH': 60, 'antialiased': 4, 'rotation': [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0], 'd1ramp': [0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 4.0, 4.0, 4.0, 4.0, 7.0, 9.0, 12.0, 14.0, 17.0, 19.0, 22.0, 24.0, 27.0, 29.0, 32.0, 34.0, 37.0, 44.0, 51.0, 57.0, 64.0, 71.0, 78.0, 84.0, 91.0, 98.0, 105.0, 111.0, 118.0, 125.0, 126.0, 128.0, 129.0, 130.0, 132.0, 133.0, 135.0, 136.0, 137.0, 139.0, 140.0, 141.0, 143.0, 144.0, 145.0, 147.0, 148.0, 149.0, 151.0, 152.0, 154.0, 155.0, 156.0, 158.0, 159.0, 160.0, 162.0, 163.0, 164.0, 166.0, 167.0, 168.0, 170.0, 171.0, 173.0, 174.0, 175.0, 177.0, 178.0, 179.0, 181.0, 182.0, 183.0, 185.0, 186.0, 187.0, 189.0, 190.0, 192.0, 193.0, 194.0, 196.0, 197.0, 197.0, 198.0, 198.0, 199.0, 199.0, 199.0, 200.0, 200.0, 200.0, 201.0, 201.0, 202.0, 202.0, 202.0, 203.0, 203.0, 204.0, 204.0, 204.0, 205.0, 205.0, 205.0, 206.0, 206.0, 207.0, 207.0, 207.0, 208.0, 208.0, 209.0, 209.0, 209.0, 210.0, 210.0, 210.0, 211.0, 211.0, 212.0, 212.0, 212.0, 213.0, 213.0, 214.0, 214.0, 214.0, 215.0, 215.0, 215.0, 216.0, 216.0, 217.0, 217.0, 217.0, 218.0, 218.0, 219.0, 219.0, 219.0, 220.0, 220.0, 220.0, 221.0, 221.0, 222.0, 222.0, 222.0, 223.0, 223.0, 224.0, 224.0, 224.0, 225.0, 225.0, 225.0, 226.0, 226.0, 227.0, 227.0, 227.0, 228.0, 228.0, 228.0, 229.0, 229.0, 230.0, 230.0, 230.0, 231.0, 231.0, 232.0, 232.0, 232.0, 233.0, 233.0, 233.0, 234.0, 234.0, 235.0, 235.0, 235.0, 236.0, 236.0, 237.0, 237.0, 237.0, 238.0, 238.0, 238.0, 239.0, 239.0, 240.0, 240.0, 240.0, 241.0, 241.0, 242.0, 242.0, 242.0, 243.0, 243.0, 243.0, 244.0, 244.0, 245.0, 245.0, 245.0, 246.0, 246.0, 247.0, 247.0, 247.0, 248.0, 248.0, 248.0, 249.0, 249.0, 250.0, 250.0, 250.0, 251.0, 251.0, 252.0, 252.0, 252.0, 253.0, 253.0, 253.0, 254.0, 254.0, 255.0, 255.0], 'suspendRedraw': False, 'd1cutL': 0, 'd2scale': 0.0, 'near': 245.4082733561489, 'drawThumbnail': False, 'd1scale': 0.012999999999999999}
    apply(self.vi.cameras[0].Set, (), state)

    state = {'end': 471.0948580028716, 'density': 0.10000000000000001, 'color': (0.0, 0.0, 0.0, 1.0), 'enabled': 1, 'start': 272.67585928460988, 'mode': 'GL_LINEAR'}
    apply(self.vi.cameras[0].fog.Set, (), state)

    ## End Cameras

    ## Clipping planes
    ## End Clipping planes

    ## Root object
    state = {'scissorAspectRatio': 1.0, 'inheritStippleLines': 0, 'stippleLines': False, 'disableStencil': False, 'replace': True, 'visible': True, 'immediateRendering': False, 'inheritLighting': False, 'invertNormals': False, 'pivot': [0.0, 0.0, 0.0], 'rotation': [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0], 'instanceMatricesFromFortran': [[1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0]], 'scissorH': 200, 'frontPolyMode': 'fill', 'blendFunctions': ('GL_SRC_ALPHA', 'GL_ONE_MINUS_SRC_ALPHA'), 'outline': (False, False), 'vertexArrayFlag': False, 'scissorX': 0, 'scissorY': 0, 'listed': True, 'inheritPointWidth': 0, 'pickable': True, 'pointWidth': 2, 'scissorW': 200, 'needsRedoDpyListOnResize': False, 'stipplePolygons': False, 'pickableVertices': False, 'inheritMaterial': False, 'depthMask': 1, 'inheritSharpColorBoundaries': False, 'scale': [1.0, 1.0, 1.0], 'lighting': True, 'inheritCulling': False, 'inheritShading': False, 'shading': 'smooth', 'translation': [0.0, 0.0, 0.0], 'transparent': False, 'sharpColorBoundaries': True, 'culling': 'back', 'name': 'root', 'backPolyMode': 'fill', 'inheritFrontPolyMode': False, 'inheritStipplePolygons': 0, 'inheritBackPolyMode': False, 'scissor': False, 'inheritLineWidth': 0, 'lineWidth': 2, 'inheritXform': 0}
    apply(self.vi.rootObject.Set, (), state)

    ## End Root Object

    ## Material for root
    if self.vi.rootObject:
        pass  ## needed in case there no modif
    ## End Materials for root

    ## Clipping Planes for root
    if self.vi.rootObject:
        self.vi.rootObject.clipP = []
        self.vi.rootObject.clipPI = []
        pass  ## needed in case there no modif
    ## End Clipping Planes for root

Pmv_Viewer_5.restoreStates_cb = Pmv_Viewer_5.restoreStatesFirstRun = loadSavedStates_Pmv_Viewer_5
Pmv_Viewer_5.menu.add_separator()
Pmv_Viewer_5.menu.add_command(label='Restore states', command=Pmv_Viewer_5.restoreStates_cb)

if __name__=='__main__':
    from sys import argv
    lNodePortValues = []
    if (len(argv) > 1) and argv[1].startswith('-'):
        lArgIndex = 2
    else:
        lArgIndex = 1
    while lArgIndex < len(argv) and argv[lArgIndex][-3:]!='.py':
        lNodePortValues.append(argv[lArgIndex])
        lArgIndex += 1
    masterNet.setNodePortValues(lNodePortValues)
    if '--help' in argv or '-h' in argv: # show help
        masterNet.helpForNetworkAsApplication()
    elif '-w' in argv: # run without Vision and exit
         # create communicator
        from NetworkEditor.net import Communicator
        masterNet.communicator = Communicator(masterNet)
        print 'Communicator listening on port:', masterNet.communicator.port

        import socket
        f = open(argv[0]+'.sock', 'w')
        f.write("%s %i"%(socket.gethostbyname(socket.gethostname()),
                         masterNet.communicator.port))
        f.close()

        # create communication socket
        import socket
        HOST = ''                 # Symbolic name meaning the local host
        PORT = 50010              # Arbitrary non-privileged port
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.bind((HOST, PORT))
        s.listen(5)
        s.setblocking(0)
        masterNet.socket = s
        masterNet.socketConnections = []
        masterNet.HOST = HOST
        masterNet.PORT = PORT

        masterNet.run()

    else: # stand alone application while vision is hidden
        if '-e' in argv: # run and exit
            masterNet.run()
        elif '-r' in argv or len(masterNet.userPanels) == 0: # no user panel => run
            masterNet.run()
            mainLoopVisionToRunNetworkAsApplication(masterNet.editor)
        else: # user panel
            mainLoopVisionToRunNetworkAsApplication(masterNet.editor)

