# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _geomalgorithms
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


triangleNormalsPerFace = _geomalgorithms.triangleNormalsPerFace
triangleNormalsPerVertex = _geomalgorithms.triangleNormalsPerVertex
triangleNormalsBoth = _geomalgorithms.triangleNormalsBoth
removeDuplicatedVertices = _geomalgorithms.removeDuplicatedVertices
computeRMSD = _geomalgorithms.computeRMSD
def TriangleNormals(vertices, triangles, mode = "PER_FACE" ):
    import numpy.oldnumeric as Numeric
    import numpy
    if (type(vertices) == Numeric.arraytype) \
      or (type(vertices) == numpy.ndarray):
        vertices = vertices.astype('f')
    if type(triangles) == Numeric.arraytype \
      or (type(triangles) == numpy.ndarray):
        triangles = triangles.astype('i')

    if mode == "PER_FACE":
        return triangleNormalsPerFace(vertices, triangles)
    elif mode == "PER_VERTEX":
        return triangleNormalsPerVertex(vertices, triangles)  
    elif mode == "BOTH":
        return triangleNormalsBoth(vertices, triangles) 

closest2D_Point_to_Line = _geomalgorithms.closest2D_Point_to_Line
dist_Point_to_Line = _geomalgorithms.dist_Point_to_Line
dist_Point_to_Segment = _geomalgorithms.dist_Point_to_Segment
pbase_Plane = _geomalgorithms.pbase_Plane
dist3D_Line_to_Line = _geomalgorithms.dist3D_Line_to_Line
dist3D_Segment_to_Segment = _geomalgorithms.dist3D_Segment_to_Segment
cpa_time = _geomalgorithms.cpa_time
cpa_distance = _geomalgorithms.cpa_distance
intersect2D_Segments = _geomalgorithms.intersect2D_Segments
inSegment = _geomalgorithms.inSegment
intersect3D_SegmentPlane = _geomalgorithms.intersect3D_SegmentPlane
intersect3D_2Planes = _geomalgorithms.intersect3D_2Planes
intersect_RayTriangle = _geomalgorithms.intersect_RayTriangle
class Vert(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vert, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vert, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _geomalgorithms.Vert_x_set
    __swig_getmethods__["x"] = _geomalgorithms.Vert_x_get
    if _newclass:x = _swig_property(_geomalgorithms.Vert_x_get, _geomalgorithms.Vert_x_set)
    __swig_setmethods__["y"] = _geomalgorithms.Vert_y_set
    __swig_getmethods__["y"] = _geomalgorithms.Vert_y_get
    if _newclass:y = _swig_property(_geomalgorithms.Vert_y_get, _geomalgorithms.Vert_y_set)
    __swig_setmethods__["z"] = _geomalgorithms.Vert_z_set
    __swig_getmethods__["z"] = _geomalgorithms.Vert_z_get
    if _newclass:z = _swig_property(_geomalgorithms.Vert_z_get, _geomalgorithms.Vert_z_set)
    def __init__(self, *args, **kwargs): 
        this = _geomalgorithms.new_Vert(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _geomalgorithms.delete_Vert
    __del__ = lambda self : None;
Vert_swigregister = _geomalgorithms.Vert_swigregister
Vert_swigregister(Vert)

orientation2D_Polygon = _geomalgorithms.orientation2D_Polygon
area2D_Polygon = _geomalgorithms.area2D_Polygon
area3D_Polygon = _geomalgorithms.area3D_Polygon
fastBall = _geomalgorithms.fastBall
detectObjFileContent = _geomalgorithms.detectObjFileContent
readObjFileGroup = _geomalgorithms.readObjFileGroup


