# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _utillib
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


void_void_array_get = _utillib.void_void_array_get
void_void_dim = _utillib.void_void_dim
void_void_NULL = _utillib.void_void_NULL
void_GLenum_array_get = _utillib.void_GLenum_array_get
void_GLenum_dim = _utillib.void_GLenum_dim
void_GLenum_NULL = _utillib.void_GLenum_NULL
void_int_array_get = _utillib.void_int_array_get
void_int_dim = _utillib.void_int_dim
void_int_NULL = _utillib.void_int_NULL
void_int_int_array_get = _utillib.void_int_int_array_get
void_int_int_dim = _utillib.void_int_int_dim
void_int_int_NULL = _utillib.void_int_int_NULL
void_int_int_int_array_get = _utillib.void_int_int_int_array_get
void_int_int_int_dim = _utillib.void_int_int_int_dim
void_int_int_int_NULL = _utillib.void_int_int_int_NULL
void_int_int_int_int_array_get = _utillib.void_int_int_int_int_array_get
void_int_int_int_int_dim = _utillib.void_int_int_int_int_dim
void_int_int_int_int_NULL = _utillib.void_int_int_int_int_NULL
void_unsignedchar_int_int_array_get = _utillib.void_unsignedchar_int_int_array_get
void_unsignedchar_int_int_dim = _utillib.void_unsignedchar_int_int_dim
void_unsignedchar_int_int_NULL = _utillib.void_unsignedchar_int_int_NULL
void_unsignedint_int_int_int_array_get = _utillib.void_unsignedint_int_int_int_array_get
void_unsignedint_int_int_int_dim = _utillib.void_unsignedint_int_int_int_dim
void_unsignedint_int_int_int_NULL = _utillib.void_unsignedint_int_int_int_NULL
void_int_voidstar_array_get = _utillib.void_int_voidstar_array_get
void_int_voidstar_dim = _utillib.void_int_voidstar_dim
void_int_voidstar_NULL = _utillib.void_int_voidstar_NULL
sizeof_GLbitfield = _utillib.sizeof_GLbitfield
sizeof_GLboolean = _utillib.sizeof_GLboolean
sizeof_GLbyte = _utillib.sizeof_GLbyte
sizeof_GLclampd = _utillib.sizeof_GLclampd
sizeof_GLclampf = _utillib.sizeof_GLclampf
sizeof_GLdouble = _utillib.sizeof_GLdouble
sizeof_GLenum = _utillib.sizeof_GLenum
sizeof_GLfloat = _utillib.sizeof_GLfloat
sizeof_GLint = _utillib.sizeof_GLint
sizeof_GLshort = _utillib.sizeof_GLshort
sizeof_GLsizei = _utillib.sizeof_GLsizei
sizeof_GLubyte = _utillib.sizeof_GLubyte
sizeof_GLuint = _utillib.sizeof_GLuint
sizeof_GLushort = _utillib.sizeof_GLushort
glCleanRotMat = _utillib.glCleanRotMat
extractedGlutSolidSphere = _utillib.extractedGlutSolidSphere
solidCylinder = _utillib.solidCylinder
namedPoints = _utillib.namedPoints
glDrawSphereSet = _utillib.glDrawSphereSet
glDrawCylinderSet = _utillib.glDrawCylinderSet
glDrawIndexedGeom = _utillib.glDrawIndexedGeom
triangleNormalsPerFace = _utillib.triangleNormalsPerFace
triangleNormalsPerVertex = _utillib.triangleNormalsPerVertex
triangleNormalsBoth = _utillib.triangleNormalsBoth
def glTriangleNormals(vertices, triangles, mode = "PER_FACE" ):
    if mode == "PER_FACE":
        return triangleNormalsPerFace(vertices, triangles)
    elif mode == "PER_VERTEX":
        return triangleNormalsPerVertex(vertices, triangles)
    elif mode == "BOTH":
        return triangleNormalsBoth(vertices, triangles)


attachCurrentThread = _utillib.attachCurrentThread
detachCurrentThread = _utillib.detachCurrentThread
attachedThread = _utillib.attachedThread
glTrackball = _utillib.glTrackball

