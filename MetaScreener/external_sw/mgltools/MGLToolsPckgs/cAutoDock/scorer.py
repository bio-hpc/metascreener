# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _scorer
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class PySwigIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _scorer.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return _scorer.PySwigIterator_value(*args)
    def incr(*args): return _scorer.PySwigIterator_incr(*args)
    def decr(*args): return _scorer.PySwigIterator_decr(*args)
    def distance(*args): return _scorer.PySwigIterator_distance(*args)
    def equal(*args): return _scorer.PySwigIterator_equal(*args)
    def copy(*args): return _scorer.PySwigIterator_copy(*args)
    def next(*args): return _scorer.PySwigIterator_next(*args)
    def previous(*args): return _scorer.PySwigIterator_previous(*args)
    def advance(*args): return _scorer.PySwigIterator_advance(*args)
    def __eq__(*args): return _scorer.PySwigIterator___eq__(*args)
    def __ne__(*args): return _scorer.PySwigIterator___ne__(*args)
    def __iadd__(*args): return _scorer.PySwigIterator___iadd__(*args)
    def __isub__(*args): return _scorer.PySwigIterator___isub__(*args)
    def __add__(*args): return _scorer.PySwigIterator___add__(*args)
    def __sub__(*args): return _scorer.PySwigIterator___sub__(*args)
    def __iter__(self): return self
PySwigIterator_swigregister = _scorer.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class AtomVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtomVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AtomVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return _scorer.AtomVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _scorer.AtomVector___nonzero__(*args)
    def __len__(*args): return _scorer.AtomVector___len__(*args)
    def pop(*args): return _scorer.AtomVector_pop(*args)
    def __getslice__(*args): return _scorer.AtomVector___getslice__(*args)
    def __setslice__(*args): return _scorer.AtomVector___setslice__(*args)
    def __delslice__(*args): return _scorer.AtomVector___delslice__(*args)
    def __delitem__(*args): return _scorer.AtomVector___delitem__(*args)
    def __getitem__(*args): return _scorer.AtomVector___getitem__(*args)
    def __setitem__(*args): return _scorer.AtomVector___setitem__(*args)
    def append(*args): return _scorer.AtomVector_append(*args)
    def empty(*args): return _scorer.AtomVector_empty(*args)
    def size(*args): return _scorer.AtomVector_size(*args)
    def clear(*args): return _scorer.AtomVector_clear(*args)
    def swap(*args): return _scorer.AtomVector_swap(*args)
    def get_allocator(*args): return _scorer.AtomVector_get_allocator(*args)
    def begin(*args): return _scorer.AtomVector_begin(*args)
    def end(*args): return _scorer.AtomVector_end(*args)
    def rbegin(*args): return _scorer.AtomVector_rbegin(*args)
    def rend(*args): return _scorer.AtomVector_rend(*args)
    def pop_back(*args): return _scorer.AtomVector_pop_back(*args)
    def erase(*args): return _scorer.AtomVector_erase(*args)
    def __init__(self, *args): 
        this = _scorer.new_AtomVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _scorer.AtomVector_push_back(*args)
    def front(*args): return _scorer.AtomVector_front(*args)
    def back(*args): return _scorer.AtomVector_back(*args)
    def assign(*args): return _scorer.AtomVector_assign(*args)
    def resize(*args): return _scorer.AtomVector_resize(*args)
    def insert(*args): return _scorer.AtomVector_insert(*args)
    def reserve(*args): return _scorer.AtomVector_reserve(*args)
    def capacity(*args): return _scorer.AtomVector_capacity(*args)
    __swig_destroy__ = _scorer.delete_AtomVector
    __del__ = lambda self : None;
AtomVector_swigregister = _scorer.AtomVector_swigregister
AtomVector_swigregister(AtomVector)

class BondVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BondVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BondVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return _scorer.BondVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _scorer.BondVector___nonzero__(*args)
    def __len__(*args): return _scorer.BondVector___len__(*args)
    def pop(*args): return _scorer.BondVector_pop(*args)
    def __getslice__(*args): return _scorer.BondVector___getslice__(*args)
    def __setslice__(*args): return _scorer.BondVector___setslice__(*args)
    def __delslice__(*args): return _scorer.BondVector___delslice__(*args)
    def __delitem__(*args): return _scorer.BondVector___delitem__(*args)
    def __getitem__(*args): return _scorer.BondVector___getitem__(*args)
    def __setitem__(*args): return _scorer.BondVector___setitem__(*args)
    def append(*args): return _scorer.BondVector_append(*args)
    def empty(*args): return _scorer.BondVector_empty(*args)
    def size(*args): return _scorer.BondVector_size(*args)
    def clear(*args): return _scorer.BondVector_clear(*args)
    def swap(*args): return _scorer.BondVector_swap(*args)
    def get_allocator(*args): return _scorer.BondVector_get_allocator(*args)
    def begin(*args): return _scorer.BondVector_begin(*args)
    def end(*args): return _scorer.BondVector_end(*args)
    def rbegin(*args): return _scorer.BondVector_rbegin(*args)
    def rend(*args): return _scorer.BondVector_rend(*args)
    def pop_back(*args): return _scorer.BondVector_pop_back(*args)
    def erase(*args): return _scorer.BondVector_erase(*args)
    def __init__(self, *args): 
        this = _scorer.new_BondVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _scorer.BondVector_push_back(*args)
    def front(*args): return _scorer.BondVector_front(*args)
    def back(*args): return _scorer.BondVector_back(*args)
    def assign(*args): return _scorer.BondVector_assign(*args)
    def resize(*args): return _scorer.BondVector_resize(*args)
    def insert(*args): return _scorer.BondVector_insert(*args)
    def reserve(*args): return _scorer.BondVector_reserve(*args)
    def capacity(*args): return _scorer.BondVector_capacity(*args)
    __swig_destroy__ = _scorer.delete_BondVector
    __del__ = lambda self : None;
BondVector_swigregister = _scorer.BondVector_swigregister
BondVector_swigregister(BondVector)

class CoordsVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoordsVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CoordsVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return _scorer.CoordsVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _scorer.CoordsVector___nonzero__(*args)
    def __len__(*args): return _scorer.CoordsVector___len__(*args)
    def pop(*args): return _scorer.CoordsVector_pop(*args)
    def __getslice__(*args): return _scorer.CoordsVector___getslice__(*args)
    def __setslice__(*args): return _scorer.CoordsVector___setslice__(*args)
    def __delslice__(*args): return _scorer.CoordsVector___delslice__(*args)
    def __delitem__(*args): return _scorer.CoordsVector___delitem__(*args)
    def __getitem__(*args): return _scorer.CoordsVector___getitem__(*args)
    def __setitem__(*args): return _scorer.CoordsVector___setitem__(*args)
    def append(*args): return _scorer.CoordsVector_append(*args)
    def empty(*args): return _scorer.CoordsVector_empty(*args)
    def size(*args): return _scorer.CoordsVector_size(*args)
    def clear(*args): return _scorer.CoordsVector_clear(*args)
    def swap(*args): return _scorer.CoordsVector_swap(*args)
    def get_allocator(*args): return _scorer.CoordsVector_get_allocator(*args)
    def begin(*args): return _scorer.CoordsVector_begin(*args)
    def end(*args): return _scorer.CoordsVector_end(*args)
    def rbegin(*args): return _scorer.CoordsVector_rbegin(*args)
    def rend(*args): return _scorer.CoordsVector_rend(*args)
    def pop_back(*args): return _scorer.CoordsVector_pop_back(*args)
    def erase(*args): return _scorer.CoordsVector_erase(*args)
    def __init__(self, *args): 
        this = _scorer.new_CoordsVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _scorer.CoordsVector_push_back(*args)
    def front(*args): return _scorer.CoordsVector_front(*args)
    def back(*args): return _scorer.CoordsVector_back(*args)
    def assign(*args): return _scorer.CoordsVector_assign(*args)
    def resize(*args): return _scorer.CoordsVector_resize(*args)
    def insert(*args): return _scorer.CoordsVector_insert(*args)
    def reserve(*args): return _scorer.CoordsVector_reserve(*args)
    def capacity(*args): return _scorer.CoordsVector_capacity(*args)
    __swig_destroy__ = _scorer.delete_CoordsVector
    __del__ = lambda self : None;
CoordsVector_swigregister = _scorer.CoordsVector_swigregister
CoordsVector_swigregister(CoordsVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return _scorer.DoubleVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _scorer.DoubleVector___nonzero__(*args)
    def __len__(*args): return _scorer.DoubleVector___len__(*args)
    def pop(*args): return _scorer.DoubleVector_pop(*args)
    def __getslice__(*args): return _scorer.DoubleVector___getslice__(*args)
    def __setslice__(*args): return _scorer.DoubleVector___setslice__(*args)
    def __delslice__(*args): return _scorer.DoubleVector___delslice__(*args)
    def __delitem__(*args): return _scorer.DoubleVector___delitem__(*args)
    def __getitem__(*args): return _scorer.DoubleVector___getitem__(*args)
    def __setitem__(*args): return _scorer.DoubleVector___setitem__(*args)
    def append(*args): return _scorer.DoubleVector_append(*args)
    def empty(*args): return _scorer.DoubleVector_empty(*args)
    def size(*args): return _scorer.DoubleVector_size(*args)
    def clear(*args): return _scorer.DoubleVector_clear(*args)
    def swap(*args): return _scorer.DoubleVector_swap(*args)
    def get_allocator(*args): return _scorer.DoubleVector_get_allocator(*args)
    def begin(*args): return _scorer.DoubleVector_begin(*args)
    def end(*args): return _scorer.DoubleVector_end(*args)
    def rbegin(*args): return _scorer.DoubleVector_rbegin(*args)
    def rend(*args): return _scorer.DoubleVector_rend(*args)
    def pop_back(*args): return _scorer.DoubleVector_pop_back(*args)
    def erase(*args): return _scorer.DoubleVector_erase(*args)
    def __init__(self, *args): 
        this = _scorer.new_DoubleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _scorer.DoubleVector_push_back(*args)
    def front(*args): return _scorer.DoubleVector_front(*args)
    def back(*args): return _scorer.DoubleVector_back(*args)
    def assign(*args): return _scorer.DoubleVector_assign(*args)
    def resize(*args): return _scorer.DoubleVector_resize(*args)
    def insert(*args): return _scorer.DoubleVector_insert(*args)
    def reserve(*args): return _scorer.DoubleVector_reserve(*args)
    def capacity(*args): return _scorer.DoubleVector_capacity(*args)
    __swig_destroy__ = _scorer.delete_DoubleVector
    __del__ = lambda self : None;
DoubleVector_swigregister = _scorer.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class DoubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleArray, name)
    __repr__ = _swig_repr
    def iterator(*args): return _scorer.DoubleArray_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _scorer.DoubleArray___nonzero__(*args)
    def __len__(*args): return _scorer.DoubleArray___len__(*args)
    def pop(*args): return _scorer.DoubleArray_pop(*args)
    def __getslice__(*args): return _scorer.DoubleArray___getslice__(*args)
    def __setslice__(*args): return _scorer.DoubleArray___setslice__(*args)
    def __delslice__(*args): return _scorer.DoubleArray___delslice__(*args)
    def __delitem__(*args): return _scorer.DoubleArray___delitem__(*args)
    def __getitem__(*args): return _scorer.DoubleArray___getitem__(*args)
    def __setitem__(*args): return _scorer.DoubleArray___setitem__(*args)
    def append(*args): return _scorer.DoubleArray_append(*args)
    def empty(*args): return _scorer.DoubleArray_empty(*args)
    def size(*args): return _scorer.DoubleArray_size(*args)
    def clear(*args): return _scorer.DoubleArray_clear(*args)
    def swap(*args): return _scorer.DoubleArray_swap(*args)
    def get_allocator(*args): return _scorer.DoubleArray_get_allocator(*args)
    def begin(*args): return _scorer.DoubleArray_begin(*args)
    def end(*args): return _scorer.DoubleArray_end(*args)
    def rbegin(*args): return _scorer.DoubleArray_rbegin(*args)
    def rend(*args): return _scorer.DoubleArray_rend(*args)
    def pop_back(*args): return _scorer.DoubleArray_pop_back(*args)
    def erase(*args): return _scorer.DoubleArray_erase(*args)
    def __init__(self, *args): 
        this = _scorer.new_DoubleArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _scorer.DoubleArray_push_back(*args)
    def front(*args): return _scorer.DoubleArray_front(*args)
    def back(*args): return _scorer.DoubleArray_back(*args)
    def assign(*args): return _scorer.DoubleArray_assign(*args)
    def resize(*args): return _scorer.DoubleArray_resize(*args)
    def insert(*args): return _scorer.DoubleArray_insert(*args)
    def reserve(*args): return _scorer.DoubleArray_reserve(*args)
    def capacity(*args): return _scorer.DoubleArray_capacity(*args)
    __swig_destroy__ = _scorer.delete_DoubleArray
    __del__ = lambda self : None;
DoubleArray_swigregister = _scorer.DoubleArray_swigregister
DoubleArray_swigregister(DoubleArray)

class DoubleArrayArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleArrayArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleArrayArray, name)
    __repr__ = _swig_repr
    def iterator(*args): return _scorer.DoubleArrayArray_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _scorer.DoubleArrayArray___nonzero__(*args)
    def __len__(*args): return _scorer.DoubleArrayArray___len__(*args)
    def pop(*args): return _scorer.DoubleArrayArray_pop(*args)
    def __getslice__(*args): return _scorer.DoubleArrayArray___getslice__(*args)
    def __setslice__(*args): return _scorer.DoubleArrayArray___setslice__(*args)
    def __delslice__(*args): return _scorer.DoubleArrayArray___delslice__(*args)
    def __delitem__(*args): return _scorer.DoubleArrayArray___delitem__(*args)
    def __getitem__(*args): return _scorer.DoubleArrayArray___getitem__(*args)
    def __setitem__(*args): return _scorer.DoubleArrayArray___setitem__(*args)
    def append(*args): return _scorer.DoubleArrayArray_append(*args)
    def empty(*args): return _scorer.DoubleArrayArray_empty(*args)
    def size(*args): return _scorer.DoubleArrayArray_size(*args)
    def clear(*args): return _scorer.DoubleArrayArray_clear(*args)
    def swap(*args): return _scorer.DoubleArrayArray_swap(*args)
    def get_allocator(*args): return _scorer.DoubleArrayArray_get_allocator(*args)
    def begin(*args): return _scorer.DoubleArrayArray_begin(*args)
    def end(*args): return _scorer.DoubleArrayArray_end(*args)
    def rbegin(*args): return _scorer.DoubleArrayArray_rbegin(*args)
    def rend(*args): return _scorer.DoubleArrayArray_rend(*args)
    def pop_back(*args): return _scorer.DoubleArrayArray_pop_back(*args)
    def erase(*args): return _scorer.DoubleArrayArray_erase(*args)
    def __init__(self, *args): 
        this = _scorer.new_DoubleArrayArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _scorer.DoubleArrayArray_push_back(*args)
    def front(*args): return _scorer.DoubleArrayArray_front(*args)
    def back(*args): return _scorer.DoubleArrayArray_back(*args)
    def assign(*args): return _scorer.DoubleArrayArray_assign(*args)
    def resize(*args): return _scorer.DoubleArrayArray_resize(*args)
    def insert(*args): return _scorer.DoubleArrayArray_insert(*args)
    def reserve(*args): return _scorer.DoubleArrayArray_reserve(*args)
    def capacity(*args): return _scorer.DoubleArrayArray_capacity(*args)
    __swig_destroy__ = _scorer.delete_DoubleArrayArray
    __del__ = lambda self : None;
DoubleArrayArray_swigregister = _scorer.DoubleArrayArray_swigregister
DoubleArrayArray_swigregister(DoubleArrayArray)

class TermVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TermVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TermVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return _scorer.TermVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _scorer.TermVector___nonzero__(*args)
    def __len__(*args): return _scorer.TermVector___len__(*args)
    def pop(*args): return _scorer.TermVector_pop(*args)
    def __getslice__(*args): return _scorer.TermVector___getslice__(*args)
    def __setslice__(*args): return _scorer.TermVector___setslice__(*args)
    def __delslice__(*args): return _scorer.TermVector___delslice__(*args)
    def __delitem__(*args): return _scorer.TermVector___delitem__(*args)
    def __getitem__(*args): return _scorer.TermVector___getitem__(*args)
    def __setitem__(*args): return _scorer.TermVector___setitem__(*args)
    def append(*args): return _scorer.TermVector_append(*args)
    def empty(*args): return _scorer.TermVector_empty(*args)
    def size(*args): return _scorer.TermVector_size(*args)
    def clear(*args): return _scorer.TermVector_clear(*args)
    def swap(*args): return _scorer.TermVector_swap(*args)
    def get_allocator(*args): return _scorer.TermVector_get_allocator(*args)
    def begin(*args): return _scorer.TermVector_begin(*args)
    def end(*args): return _scorer.TermVector_end(*args)
    def rbegin(*args): return _scorer.TermVector_rbegin(*args)
    def rend(*args): return _scorer.TermVector_rend(*args)
    def pop_back(*args): return _scorer.TermVector_pop_back(*args)
    def erase(*args): return _scorer.TermVector_erase(*args)
    def __init__(self, *args): 
        this = _scorer.new_TermVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _scorer.TermVector_push_back(*args)
    def front(*args): return _scorer.TermVector_front(*args)
    def back(*args): return _scorer.TermVector_back(*args)
    def assign(*args): return _scorer.TermVector_assign(*args)
    def resize(*args): return _scorer.TermVector_resize(*args)
    def insert(*args): return _scorer.TermVector_insert(*args)
    def reserve(*args): return _scorer.TermVector_reserve(*args)
    def capacity(*args): return _scorer.TermVector_capacity(*args)
    __swig_destroy__ = _scorer.delete_TermVector
    __del__ = lambda self : None;
TermVector_swigregister = _scorer.TermVector_swigregister
TermVector_swigregister(TermVector)

class DoublePtrArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoublePtrArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoublePtrArray, name)
    __repr__ = _swig_repr
    def iterator(*args): return _scorer.DoublePtrArray_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _scorer.DoublePtrArray___nonzero__(*args)
    def __len__(*args): return _scorer.DoublePtrArray___len__(*args)
    def pop(*args): return _scorer.DoublePtrArray_pop(*args)
    def __getslice__(*args): return _scorer.DoublePtrArray___getslice__(*args)
    def __setslice__(*args): return _scorer.DoublePtrArray___setslice__(*args)
    def __delslice__(*args): return _scorer.DoublePtrArray___delslice__(*args)
    def __delitem__(*args): return _scorer.DoublePtrArray___delitem__(*args)
    def __getitem__(*args): return _scorer.DoublePtrArray___getitem__(*args)
    def __setitem__(*args): return _scorer.DoublePtrArray___setitem__(*args)
    def append(*args): return _scorer.DoublePtrArray_append(*args)
    def empty(*args): return _scorer.DoublePtrArray_empty(*args)
    def size(*args): return _scorer.DoublePtrArray_size(*args)
    def clear(*args): return _scorer.DoublePtrArray_clear(*args)
    def swap(*args): return _scorer.DoublePtrArray_swap(*args)
    def get_allocator(*args): return _scorer.DoublePtrArray_get_allocator(*args)
    def begin(*args): return _scorer.DoublePtrArray_begin(*args)
    def end(*args): return _scorer.DoublePtrArray_end(*args)
    def rbegin(*args): return _scorer.DoublePtrArray_rbegin(*args)
    def rend(*args): return _scorer.DoublePtrArray_rend(*args)
    def pop_back(*args): return _scorer.DoublePtrArray_pop_back(*args)
    def erase(*args): return _scorer.DoublePtrArray_erase(*args)
    def __init__(self, *args): 
        this = _scorer.new_DoublePtrArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _scorer.DoublePtrArray_push_back(*args)
    def front(*args): return _scorer.DoublePtrArray_front(*args)
    def back(*args): return _scorer.DoublePtrArray_back(*args)
    def assign(*args): return _scorer.DoublePtrArray_assign(*args)
    def resize(*args): return _scorer.DoublePtrArray_resize(*args)
    def insert(*args): return _scorer.DoublePtrArray_insert(*args)
    def reserve(*args): return _scorer.DoublePtrArray_reserve(*args)
    def capacity(*args): return _scorer.DoublePtrArray_capacity(*args)
    __swig_destroy__ = _scorer.delete_DoublePtrArray
    __del__ = lambda self : None;
DoublePtrArray_swigregister = _scorer.DoublePtrArray_swigregister
DoublePtrArray_swigregister(DoublePtrArray)

class AutoDockParameters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AutoDockParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AutoDockParameters, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _scorer.new_AutoDockParameters(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_ad_version(*args): return _scorer.AutoDockParameters_get_ad_version(*args)
    def set_ad_version(*args): return _scorer.AutoDockParameters_set_ad_version(*args)
    def is_hbond(*args): return _scorer.AutoDockParameters_is_hbond(*args)
    def get_Rij(*args): return _scorer.AutoDockParameters_get_Rij(*args)
    def set_Rij(*args): return _scorer.AutoDockParameters_set_Rij(*args)
    def get_epsij(*args): return _scorer.AutoDockParameters_get_epsij(*args)
    def set_epsij(*args): return _scorer.AutoDockParameters_set_epsij(*args)
    def get_sol_par(*args): return _scorer.AutoDockParameters_get_sol_par(*args)
    def set_sol_par(*args): return _scorer.AutoDockParameters_set_sol_par(*args)
    def get_sol_volume(*args): return _scorer.AutoDockParameters_get_sol_volume(*args)
    def set_sol_volume(*args): return _scorer.AutoDockParameters_set_sol_volume(*args)
    def get_qasp(*args): return _scorer.AutoDockParameters_get_qasp(*args)
    def get_atom_types(*args): return _scorer.AutoDockParameters_get_atom_types(*args)
    __swig_destroy__ = _scorer.delete_AutoDockParameters
    __del__ = lambda self : None;
AutoDockParameters_swigregister = _scorer.AutoDockParameters_swigregister
AutoDockParameters_swigregister(AutoDockParameters)

class PairwiseScorer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PairwiseScorer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PairwiseScorer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _scorer.new_PairwiseScorer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _scorer.delete_PairwiseScorer
    __del__ = lambda self : None;
    def set_molecular_system(*args): return _scorer.PairwiseScorer_set_molecular_system(*args)
    def _f(*args): return _scorer.PairwiseScorer__f(*args)
    def get_score_array(*args): return _scorer.PairwiseScorer_get_score_array(*args)
    def get_score(*args): return _scorer.PairwiseScorer_get_score(*args)
    def __call__(*args): return _scorer.PairwiseScorer___call__(*args)
    def get_molecular_system(*args): return _scorer.PairwiseScorer_get_molecular_system(*args)
    __swig_setmethods__["score_array"] = _scorer.PairwiseScorer_score_array_set
    __swig_getmethods__["score_array"] = _scorer.PairwiseScorer_score_array_get
    if _newclass:score_array = _swig_property(_scorer.PairwiseScorer_score_array_get, _scorer.PairwiseScorer_score_array_set)
    def get_symmetric(*args): return _scorer.PairwiseScorer_get_symmetric(*args)
    def set_symmetric(*args): return _scorer.PairwiseScorer_set_symmetric(*args)
PairwiseScorer_swigregister = _scorer.PairwiseScorer_swigregister
PairwiseScorer_swigregister(PairwiseScorer)

class DistDepPairwiseScorer(PairwiseScorer):
    __swig_setmethods__ = {}
    for _s in [PairwiseScorer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DistDepPairwiseScorer, name, value)
    __swig_getmethods__ = {}
    for _s in [PairwiseScorer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DistDepPairwiseScorer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _scorer.new_DistDepPairwiseScorer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _scorer.delete_DistDepPairwiseScorer
    __del__ = lambda self : None;
    def get_score_array(*args): return _scorer.DistDepPairwiseScorer_get_score_array(*args)
    def _f(*args): return _scorer.DistDepPairwiseScorer__f(*args)
    def get_non_bonded_cutoff(*args): return _scorer.DistDepPairwiseScorer_get_non_bonded_cutoff(*args)
    def set_non_bonded_cutoff(*args): return _scorer.DistDepPairwiseScorer_set_non_bonded_cutoff(*args)
    def get_use_non_bonded_cutoff(*args): return _scorer.DistDepPairwiseScorer_get_use_non_bonded_cutoff(*args)
    def set_use_non_bonded_cutoff(*args): return _scorer.DistDepPairwiseScorer_set_use_non_bonded_cutoff(*args)
DistDepPairwiseScorer_swigregister = _scorer.DistDepPairwiseScorer_swigregister
DistDepPairwiseScorer_swigregister(DistDepPairwiseScorer)

class MolecularSystem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MolecularSystem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MolecularSystem, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _scorer.new_MolecularSystem(*args)
        try: self.this.append(this)
        except: self.this = this
    def add_entities(*args): return _scorer.MolecularSystem_add_entities(*args)
    def build_bonds(*args): return _scorer.MolecularSystem_build_bonds(*args)
    def rebuild_bonds(*args): return _scorer.MolecularSystem_rebuild_bonds(*args)
    def set_coords(*args): return _scorer.MolecularSystem_set_coords(*args)
    def check_distance_cutoff(*args): return _scorer.MolecularSystem_check_distance_cutoff(*args)
    def get_distance_matrix(*args): return _scorer.MolecularSystem_get_distance_matrix(*args)
    def get_atoms(*args): return _scorer.MolecularSystem_get_atoms(*args)
    def get_configuration(*args): return _scorer.MolecularSystem_get_configuration(*args)
    def set_configuration(*args): return _scorer.MolecularSystem_set_configuration(*args)
    def cppunit_distance_matrices(*args): return _scorer.MolecularSystem_cppunit_distance_matrices(*args)
    def compute_bonded_matrix(*args): return _scorer.MolecularSystem_compute_bonded_matrix(*args)
    def ignore_interface(*args): return _scorer.MolecularSystem_ignore_interface(*args)
    def ignore_recptor_ligand_bonds(*args): return _scorer.MolecularSystem_ignore_recptor_ligand_bonds(*args)
    __swig_setmethods__["mask"] = _scorer.MolecularSystem_mask_set
    __swig_getmethods__["mask"] = _scorer.MolecularSystem_mask_get
    if _newclass:mask = _swig_property(_scorer.MolecularSystem_mask_get, _scorer.MolecularSystem_mask_set)
    def get_mask(*args): return _scorer.MolecularSystem_get_mask(*args)
    def set_use_mask(*args): return _scorer.MolecularSystem_set_use_mask(*args)
    def get_use_mask(*args): return _scorer.MolecularSystem_get_use_mask(*args)
    def is_masked(*args): return _scorer.MolecularSystem_is_masked(*args)
    def set_mask(*args): return _scorer.MolecularSystem_set_mask(*args)
    __swig_destroy__ = _scorer.delete_MolecularSystem
    __del__ = lambda self : None;
    def compute_distance_matrix(*args): return _scorer.MolecularSystem_compute_distance_matrix(*args)
    def clear_distance_matrix(*args): return _scorer.MolecularSystem_clear_distance_matrix(*args)
MolecularSystem_swigregister = _scorer.MolecularSystem_swigregister
MolecularSystem_swigregister(MolecularSystem)

class Atom(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Atom, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Atom, name)
    __repr__ = _swig_repr
    def __eq__(*args): return _scorer.Atom___eq__(*args)
    def __gt__(*args): return _scorer.Atom___gt__(*args)
    def __lt__(*args): return _scorer.Atom___lt__(*args)
    def get_name(*args): return _scorer.Atom_get_name(*args)
    def set_name(*args): return _scorer.Atom_set_name(*args)
    def get_element(*args): return _scorer.Atom_get_element(*args)
    def set_element(*args): return _scorer.Atom_set_element(*args)
    def get_atom_type(*args): return _scorer.Atom_get_atom_type(*args)
    def set_atom_type(*args): return _scorer.Atom_set_atom_type(*args)
    def get_coords(*args): return _scorer.Atom_get_coords(*args)
    def set_coords(*args): return _scorer.Atom_set_coords(*args)
    def get_charge(*args): return _scorer.Atom_get_charge(*args)
    def set_charge(*args): return _scorer.Atom_set_charge(*args)
    def get_atvol(*args): return _scorer.Atom_get_atvol(*args)
    def set_atvol(*args): return _scorer.Atom_set_atvol(*args)
    def get_atsolpar(*args): return _scorer.Atom_get_atsolpar(*args)
    def set_atsolpar(*args): return _scorer.Atom_set_atsolpar(*args)
    def get_bond_ord_rad(*args): return _scorer.Atom_get_bond_ord_rad(*args)
    def set_bond_ord_rad(*args): return _scorer.Atom_set_bond_ord_rad(*args)
    def get_bonds(*args): return _scorer.Atom_get_bonds(*args)
    def build_bonds(*args): return _scorer.Atom_build_bonds(*args)
    def has_bond(*args): return _scorer.Atom_has_bond(*args)
    def could_bond_to(*args): return _scorer.Atom_could_bond_to(*args)
    def get_bonds_built(*args): return _scorer.Atom_get_bonds_built(*args)
    def remove_bonds(*args): return _scorer.Atom_remove_bonds(*args)
    def get_atInterface(*args): return _scorer.Atom_get_atInterface(*args)
    def set_atInterface(*args): return _scorer.Atom_set_atInterface(*args)
    def __init__(self, *args): 
        this = _scorer.new_Atom(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _scorer.delete_Atom
    __del__ = lambda self : None;
Atom_swigregister = _scorer.Atom_swigregister
Atom_swigregister(Atom)

class Molecule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Molecule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Molecule, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _scorer.new_Molecule(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_filename(*args): return _scorer.Molecule_get_filename(*args)
    def get_name(*args): return _scorer.Molecule_get_name(*args)
    def get_atoms(*args): return _scorer.Molecule_get_atoms(*args)
    def read_pdb(*args): return _scorer.Molecule_read_pdb(*args)
    def read_pdbq(*args): return _scorer.Molecule_read_pdbq(*args)
    __swig_destroy__ = _scorer.delete_Molecule
    __del__ = lambda self : None;
Molecule_swigregister = _scorer.Molecule_swigregister
Molecule_swigregister(Molecule)

class HydrogenBonding(DistDepPairwiseScorer):
    __swig_setmethods__ = {}
    for _s in [DistDepPairwiseScorer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HydrogenBonding, name, value)
    __swig_getmethods__ = {}
    for _s in [DistDepPairwiseScorer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HydrogenBonding, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _scorer.new_HydrogenBonding(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _scorer.delete_HydrogenBonding
    __del__ = lambda self : None;
    def _f(*args): return _scorer.HydrogenBonding__f(*args)
    def calc_closestH(*args): return _scorer.HydrogenBonding_calc_closestH(*args)
    def get_Rij(*args): return _scorer.HydrogenBonding_get_Rij(*args)
    def set_Rij(*args): return _scorer.HydrogenBonding_set_Rij(*args)
    def get_epsij(*args): return _scorer.HydrogenBonding_get_epsij(*args)
    def set_epsij(*args): return _scorer.HydrogenBonding_set_epsij(*args)
    def get_smoothing(*args): return _scorer.HydrogenBonding_get_smoothing(*args)
    def set_smoothing(*args): return _scorer.HydrogenBonding_set_smoothing(*args)
    def get_directional(*args): return _scorer.HydrogenBonding_get_directional(*args)
    def set_directional(*args): return _scorer.HydrogenBonding_set_directional(*args)
    def get_NA_HDfactor(*args): return _scorer.HydrogenBonding_get_NA_HDfactor(*args)
    def set_NA_HDfactor(*args): return _scorer.HydrogenBonding_set_NA_HDfactor(*args)
    def get_score_array(*args): return _scorer.HydrogenBonding_get_score_array(*args)
    def cppunit_get_H_factor(*args): return _scorer.HydrogenBonding_cppunit_get_H_factor(*args)
    def cppunit_get_O_factor(*args): return _scorer.HydrogenBonding_cppunit_get_O_factor(*args)
HydrogenBonding_swigregister = _scorer.HydrogenBonding_swigregister
HydrogenBonding_swigregister(HydrogenBonding)

class VanDerWaals(DistDepPairwiseScorer,AutoDockParameters):
    __swig_setmethods__ = {}
    for _s in [DistDepPairwiseScorer,AutoDockParameters]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VanDerWaals, name, value)
    __swig_getmethods__ = {}
    for _s in [DistDepPairwiseScorer,AutoDockParameters]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VanDerWaals, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _scorer.new_VanDerWaals(*args)
        try: self.this.append(this)
        except: self.this = this
    def _f(*args): return _scorer.VanDerWaals__f(*args)
    def get_smoothing(*args): return _scorer.VanDerWaals_get_smoothing(*args)
    def set_smoothing(*args): return _scorer.VanDerWaals_set_smoothing(*args)
    def set_smoothing_width(*args): return _scorer.VanDerWaals_set_smoothing_width(*args)
    __swig_destroy__ = _scorer.delete_VanDerWaals
    __del__ = lambda self : None;
VanDerWaals_swigregister = _scorer.VanDerWaals_swigregister
VanDerWaals_swigregister(VanDerWaals)

class WeightedMultiTerm(DistDepPairwiseScorer):
    __swig_setmethods__ = {}
    for _s in [DistDepPairwiseScorer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WeightedMultiTerm, name, value)
    __swig_getmethods__ = {}
    for _s in [DistDepPairwiseScorer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WeightedMultiTerm, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _scorer.new_WeightedMultiTerm(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _scorer.delete_WeightedMultiTerm
    __del__ = lambda self : None;
    def add_term(*args): return _scorer.WeightedMultiTerm_add_term(*args)
    def get_terms(*args): return _scorer.WeightedMultiTerm_get_terms(*args)
    def get_weights(*args): return _scorer.WeightedMultiTerm_get_weights(*args)
    def get_score_array(*args): return _scorer.WeightedMultiTerm_get_score_array(*args)
    def get_score(*args): return _scorer.WeightedMultiTerm_get_score(*args)
    def clear_score_array(*args): return _scorer.WeightedMultiTerm_clear_score_array(*args)
WeightedMultiTerm_swigregister = _scorer.WeightedMultiTerm_swigregister
WeightedMultiTerm_swigregister(WeightedMultiTerm)

class Coords(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Coords, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Coords, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _scorer.Coords_x_set
    __swig_getmethods__["x"] = _scorer.Coords_x_get
    if _newclass:x = _swig_property(_scorer.Coords_x_get, _scorer.Coords_x_set)
    __swig_setmethods__["y"] = _scorer.Coords_y_set
    __swig_getmethods__["y"] = _scorer.Coords_y_get
    if _newclass:y = _swig_property(_scorer.Coords_y_get, _scorer.Coords_y_set)
    __swig_setmethods__["z"] = _scorer.Coords_z_set
    __swig_getmethods__["z"] = _scorer.Coords_z_get
    if _newclass:z = _swig_property(_scorer.Coords_z_get, _scorer.Coords_z_set)
    __swig_destroy__ = _scorer.delete_Coords
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _scorer.new_Coords(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(*args): return _scorer.Coords___eq__(*args)
    def vector_to(*args): return _scorer.Coords_vector_to(*args)
    def vector_to_ptr(*args): return _scorer.Coords_vector_to_ptr(*args)
    def dot(*args): return _scorer.Coords_dot(*args)
    def __neg__(*args): return _scorer.Coords___neg__(*args)
    def __sub__(*args): return _scorer.Coords___sub__(*args)
    def __add__(*args): return _scorer.Coords___add__(*args)
    def __mul__(*args): return _scorer.Coords___mul__(*args)
    def mag(*args): return _scorer.Coords_mag(*args)
    def mag2(*args): return _scorer.Coords_mag2(*args)
    def normalize(*args): return _scorer.Coords_normalize(*args)
    def scale(*args): return _scorer.Coords_scale(*args)
Coords_swigregister = _scorer.Coords_swigregister
Coords_swigregister(Coords)

class Electrostatics(DistDepPairwiseScorer):
    __swig_setmethods__ = {}
    for _s in [DistDepPairwiseScorer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Electrostatics, name, value)
    __swig_getmethods__ = {}
    for _s in [DistDepPairwiseScorer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Electrostatics, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _scorer.new_Electrostatics(*args)
        try: self.this.append(this)
        except: self.this = this
    def _f(*args): return _scorer.Electrostatics__f(*args)
    __swig_destroy__ = _scorer.delete_Electrostatics
    __del__ = lambda self : None;
Electrostatics_swigregister = _scorer.Electrostatics_swigregister
Electrostatics_swigregister(Electrostatics)

class Desolvation(DistDepPairwiseScorer):
    __swig_setmethods__ = {}
    for _s in [DistDepPairwiseScorer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Desolvation, name, value)
    __swig_getmethods__ = {}
    for _s in [DistDepPairwiseScorer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Desolvation, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _scorer.new_Desolvation(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _scorer.delete_Desolvation
    __del__ = lambda self : None;
Desolvation_swigregister = _scorer.Desolvation_swigregister
Desolvation_swigregister(Desolvation)

class Desolvation3(Desolvation):
    __swig_setmethods__ = {}
    for _s in [Desolvation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Desolvation3, name, value)
    __swig_getmethods__ = {}
    for _s in [Desolvation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Desolvation3, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _scorer.new_Desolvation3(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _scorer.delete_Desolvation3
    __del__ = lambda self : None;
Desolvation3_swigregister = _scorer.Desolvation3_swigregister
Desolvation3_swigregister(Desolvation3)

class Desolvation4(Desolvation,AutoDockParameters):
    __swig_setmethods__ = {}
    for _s in [Desolvation,AutoDockParameters]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Desolvation4, name, value)
    __swig_getmethods__ = {}
    for _s in [Desolvation,AutoDockParameters]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Desolvation4, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _scorer.new_Desolvation4(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _scorer.delete_Desolvation4
    __del__ = lambda self : None;
Desolvation4_swigregister = _scorer.Desolvation4_swigregister
Desolvation4_swigregister(Desolvation4)

class InternalEnergy(WeightedMultiTerm):
    __swig_setmethods__ = {}
    for _s in [WeightedMultiTerm]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InternalEnergy, name, value)
    __swig_getmethods__ = {}
    for _s in [WeightedMultiTerm]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InternalEnergy, name)
    __repr__ = _swig_repr
    def set_molecular_system(*args): return _scorer.InternalEnergy_set_molecular_system(*args)
    def __init__(self, *args): 
        this = _scorer.new_InternalEnergy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _scorer.delete_InternalEnergy
    __del__ = lambda self : None;
    def add_term(*args): return _scorer.InternalEnergy_add_term(*args)
    def get_terms(*args): return _scorer.InternalEnergy_get_terms(*args)
    def get_weights(*args): return _scorer.InternalEnergy_get_weights(*args)
    def get_score_array(*args): return _scorer.InternalEnergy_get_score_array(*args)
    def get_score(*args): return _scorer.InternalEnergy_get_score(*args)
    __swig_setmethods__["score_array"] = _scorer.InternalEnergy_score_array_set
    __swig_getmethods__["score_array"] = _scorer.InternalEnergy_score_array_get
    if _newclass:score_array = _swig_property(_scorer.InternalEnergy_score_array_get, _scorer.InternalEnergy_score_array_set)
InternalEnergy_swigregister = _scorer.InternalEnergy_swigregister
InternalEnergy_swigregister(InternalEnergy)

updateCoords = _scorer.updateCoords
printAtomicCoordinate = _scorer.printAtomicCoordinate
isNAN = _scorer.isNAN


