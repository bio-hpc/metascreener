# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _lbiemesher
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


DEFAULT_ERR = _lbiemesher.DEFAULT_ERR
DEFAULT_ERR_IN = _lbiemesher.DEFAULT_ERR_IN
DEFAULT_IVAL = _lbiemesher.DEFAULT_IVAL
DEFAULT_IVAL_IN = _lbiemesher.DEFAULT_IVAL_IN
SINGLE = _lbiemesher.SINGLE
HEXA = _lbiemesher.HEXA
DOUBLE = _lbiemesher.DOUBLE
TETRA = _lbiemesher.TETRA
T_4_H = _lbiemesher.T_4_H
TETRA2 = _lbiemesher.TETRA2
class LBIE_Mesher(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LBIE_Mesher, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LBIE_Mesher, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _lbiemesher.new_LBIE_Mesher(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lbiemesher.delete_LBIE_Mesher
    __del__ = lambda self : None;
    __swig_setmethods__["oc"] = _lbiemesher.LBIE_Mesher_oc_set
    __swig_getmethods__["oc"] = _lbiemesher.LBIE_Mesher_oc_get
    if _newclass:oc = _swig_property(_lbiemesher.LBIE_Mesher_oc_get, _lbiemesher.LBIE_Mesher_oc_set)
    def inputData(*args, **kwargs): return _lbiemesher.LBIE_Mesher_inputData(*args, **kwargs)
    def fileOpen(*args, **kwargs): return _lbiemesher.LBIE_Mesher_fileOpen(*args, **kwargs)
    def fileSave(*args, **kwargs): return _lbiemesher.LBIE_Mesher_fileSave(*args, **kwargs)
    def setMesh(*args, **kwargs): return _lbiemesher.LBIE_Mesher_setMesh(*args, **kwargs)
    def errorChange(*args, **kwargs): return _lbiemesher.LBIE_Mesher_errorChange(*args, **kwargs)
    def errorChange_in(*args, **kwargs): return _lbiemesher.LBIE_Mesher_errorChange_in(*args, **kwargs)
    def isovalueChange(*args, **kwargs): return _lbiemesher.LBIE_Mesher_isovalueChange(*args, **kwargs)
    def isovalueChange_in(*args, **kwargs): return _lbiemesher.LBIE_Mesher_isovalueChange_in(*args, **kwargs)
    def outTriangle(*args, **kwargs): return _lbiemesher.LBIE_Mesher_outTriangle(*args, **kwargs)
    def outTetra(*args, **kwargs): return _lbiemesher.LBIE_Mesher_outTetra(*args, **kwargs)
    def outHexa(*args, **kwargs): return _lbiemesher.LBIE_Mesher_outHexa(*args, **kwargs)
    def outQuad(*args, **kwargs): return _lbiemesher.LBIE_Mesher_outQuad(*args, **kwargs)
    def getNumFaces(*args, **kwargs): return _lbiemesher.LBIE_Mesher_getNumFaces(*args, **kwargs)
    def getNumVerts(*args, **kwargs): return _lbiemesher.LBIE_Mesher_getNumVerts(*args, **kwargs)
    def getVolMin(*args, **kwargs): return _lbiemesher.LBIE_Mesher_getVolMin(*args, **kwargs)
    def getVolMax(*args, **kwargs): return _lbiemesher.LBIE_Mesher_getVolMax(*args, **kwargs)
    def getOuterSurface(*args, **kwargs): return _lbiemesher.LBIE_Mesher_getOuterSurface(*args, **kwargs)
    def setXCutPlane(*args, **kwargs): return _lbiemesher.LBIE_Mesher_setXCutPlane(*args, **kwargs)
    def setZCutPlane(*args, **kwargs): return _lbiemesher.LBIE_Mesher_setZCutPlane(*args, **kwargs)
    def getSurface(*args, **kwargs): return _lbiemesher.LBIE_Mesher_getSurface(*args, **kwargs)
LBIE_Mesher_swigregister = _lbiemesher.LBIE_Mesher_swigregister
LBIE_Mesher_swigregister(LBIE_Mesher)



