Metadata-Version: 2.0
Name: progressbar2
Version: 3.10.1
Summary: A Python Progressbar library to provide visual (yet text based) progress to
Requires-Dist: python-utils (>=2.0.0)

long running operations.
Home-page: https://github.com/WoLpH/python-progressbar
Author: Rick van Hattem (Wolph)
Author-email: wolph@wol.ph
License: BSD
Description: ##############################################################################
        Text progress bar library for Python.
        ##############################################################################
        
        Travis status:
        
        .. image:: https://travis-ci.org/WoLpH/python-progressbar.png?branch=master
          :target: https://travis-ci.org/WoLpH/python-progressbar
        
        Coverage:
        
        .. image:: https://coveralls.io/repos/WoLpH/python-progressbar/badge.png?branch=master
          :target: https://coveralls.io/r/WoLpH/python-progressbar?branch=master
        
        ******************************************************************************
        Introduction
        ******************************************************************************
        
        .. highlights::
        
            **NOTE:** This version has been completely rewritten and might not be
            100% compatible with the old version. If you encounter any problems
            while using it please let me know:
            https://github.com/WoLpH/python-progressbar/issues
        
        A text progress bar is typically used to display the progress of a long
        running operation, providing a visual cue that processing is underway.
        
        The ProgressBar class manages the current progress, and the format of the line
        is given by a number of widgets. A widget is an object that may display
        differently depending on the state of the progress bar. There are many types
        of widgets:
        
         - `Timer`
         - `ETA`
         - `AdaptiveETA`
         - `FileTransferSpeed`
         - `AdaptiveTransferSpeed`
         - `AnimatedMarker`
         - `Counter`
         - `Percentage`
         - `FormatLabel`
         - `SimpleProgress`
         - `Bar`
         - `ReverseBar`
         - `BouncingBar`
         - `RotatingMarker`
         - `DynamicMessage`
        
        The progressbar module is very easy to use, yet very powerful. It will also
        automatically enable features like auto-resizing when the system supports it.
        
        ******************************************************************************
        Links
        ******************************************************************************
        
        * Documentation
            - http://progressbar-2.readthedocs.org/en/latest/
        * Source
            - https://github.com/WoLpH/python-progressbar
        * Bug reports 
            - https://github.com/WoLpH/python-progressbar/issues
        * Package homepage
            - https://pypi.python.org/pypi/progressbar2
        * My blog
            - http://w.wol.ph/
        
        ******************************************************************************
        Usage
        ******************************************************************************
        
        There are many ways to use Python Progressbar, you can see a few basic examples
        here but there are many more in the examples file.
        
        Wrapping an iterable
        ==============================================================================
        ::
        
           import time
           import progressbar
        
           bar = progressbar.ProgressBar()
           for i in bar(range(100)):
               time.sleep(0.02)
        
        Context wrapper
        ==============================================================================
        ::
        
           import time
           import progressbar
        
           with progressbar.ProgressBar(max_value=10) as bar:
               for i in range(10):
                   time.sleep(0.1)
                   bar.update(i)
        
        Combining progressbars with print output
        ==============================================================================
        ::
        
            import time
            import progressbar
        
            bar = progressbar.ProgressBar(redirect_stdout=True)
            for i in range(100):
                print 'Some text', i
                time.sleep(0.1)
                bar.update(i)
        
        Progressbar with unknown length
        ==============================================================================
        ::
        
            import time
            import progressbar
        
            bar = progressbar.ProgressBar(max_value=progressbar.UnknownLength)
            for i in range(20):
                time.sleep(0.1)
                bar.update(i)
        
        Bar with custom widgets
        ==============================================================================
        ::
        
            import time
            import progressbar
        
            bar = progressbar.ProgressBar(widgets=[
                ' [', progressbar.Timer(), '] ',
                progressbar.Bar(),
                ' (', progressbar.ETA(), ') ',
            ])
            for i in bar(range(20)):
                time.sleep(0.1)
        
        
Keywords: Python Progressbar
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: BSD License
Classifier: Natural Language :: English
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.3
Classifier: Programming Language :: Python :: 3.4
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: Implementation :: PyPy
